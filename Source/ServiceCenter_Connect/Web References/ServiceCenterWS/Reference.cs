//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
// 
#pragma warning disable 1591

namespace ServiceCenter_Connect.ServiceCenterWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceStudioSoap", Namespace="http://ServiceCenter/ServiceStudio/")]
    public partial class ServiceStudio : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAndPublishExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PushProducerToConsumerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Metrics_SynchronizedOperationCompleted;
        
        private System.Threading.SendOrPostCallback EspaceTenantsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_ListApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAgainstServerVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCompilationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntryPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListEspacesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListCommitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProductLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListSolutionComponentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfilerMetricsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback Metrics_FetchOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_CreateOrUpdateAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompileOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishPTAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListCatalogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback HandshakeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanOpenOmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_AddModuleToAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEspaceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPhoneConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssociateDependenciesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteModuleByKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListReferenceableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReferenceDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeveloperOperationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProductLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHashset_FragmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPossibleEntryESpacesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListExtensionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_GetAppDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConsumersOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsesExternalAuthenticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_RemoveModuleFromAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPossibleBackOfficeESpacesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishSolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntityUsageDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstallationKindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCommitMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Apps_DeleteAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadNeededOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssemblyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadLicenseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceStudio() {
            this.Url = global::ServiceCenter_Connect.Properties.Settings.Default.ServiceCenter_Connect_ServiceCenterWS_ServiceStudio;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadNewCompletedEventHandler UploadNewCompleted;
        
        /// <remarks/>
        public event ListVersionsCompletedEventHandler ListVersionsCompleted;
        
        /// <remarks/>
        public event UploadAndPublishExtensionCompletedEventHandler UploadAndPublishExtensionCompleted;
        
        /// <remarks/>
        public event PushProducerToConsumerCompletedEventHandler PushProducerToConsumerCompleted;
        
        /// <remarks/>
        public event Metrics_SynchronizedCompletedEventHandler Metrics_SynchronizedCompleted;
        
        /// <remarks/>
        public event EspaceTenantsCompletedEventHandler EspaceTenantsCompleted;
        
        /// <remarks/>
        public event GetUserProvidersCompletedEventHandler GetUserProvidersCompleted;
        
        /// <remarks/>
        public event Apps_ListApplicationsCompletedEventHandler Apps_ListApplicationsCompleted;
        
        /// <remarks/>
        public event CheckAgainstServerVersionCompletedEventHandler CheckAgainstServerVersionCompleted;
        
        /// <remarks/>
        public event CheckCompilationCompletedEventHandler CheckCompilationCompleted;
        
        /// <remarks/>
        public event CheckPublishCompletedEventHandler CheckPublishCompleted;
        
        /// <remarks/>
        public event UploadCompletedEventHandler UploadCompleted;
        
        /// <remarks/>
        public event GetEntryPointsCompletedEventHandler GetEntryPointsCompleted;
        
        /// <remarks/>
        public event ListEspacesCompletedEventHandler ListEspacesCompleted;
        
        /// <remarks/>
        public event ListCommitsCompletedEventHandler ListCommitsCompleted;
        
        /// <remarks/>
        public event UploadProductLicenseCompletedEventHandler UploadProductLicenseCompleted;
        
        /// <remarks/>
        public event GetMessagesSolutionCompletedEventHandler GetMessagesSolutionCompleted;
        
        /// <remarks/>
        public event ListSolutionComponentsCompletedEventHandler ListSolutionComponentsCompleted;
        
        /// <remarks/>
        public event GetProfilerMetricsCompletedEventHandler GetProfilerMetricsCompleted;
        
        /// <remarks/>
        public event TestQueryCompletedEventHandler TestQueryCompleted;
        
        /// <remarks/>
        public event Metrics_FetchCompletedEventHandler Metrics_FetchCompleted;
        
        /// <remarks/>
        public event Apps_CreateOrUpdateAppCompletedEventHandler Apps_CreateOrUpdateAppCompleted;
        
        /// <remarks/>
        public event CompileCompletedEventHandler CompileCompleted;
        
        /// <remarks/>
        public event PublishPTACompletedEventHandler PublishPTACompleted;
        
        /// <remarks/>
        public event ListCatalogsCompletedEventHandler ListCatalogsCompleted;
        
        /// <remarks/>
        public event ImportTableCompletedEventHandler ImportTableCompleted;
        
        /// <remarks/>
        public event GetLicenseInformationCompletedEventHandler GetLicenseInformationCompleted;
        
        /// <remarks/>
        public event PublishCompletedEventHandler PublishCompleted;
        
        /// <remarks/>
        public event HandshakeCompletedEventHandler HandshakeCompleted;
        
        /// <remarks/>
        public event GetProductUrlCompletedEventHandler GetProductUrlCompleted;
        
        /// <remarks/>
        public event CanOpenOmlCompletedEventHandler CanOpenOmlCompleted;
        
        /// <remarks/>
        public event Apps_AddModuleToAppCompletedEventHandler Apps_AddModuleToAppCompleted;
        
        /// <remarks/>
        public event DownloadExtensionCompletedEventHandler DownloadExtensionCompleted;
        
        /// <remarks/>
        public event GetEspaceIdCompletedEventHandler GetEspaceIdCompleted;
        
        /// <remarks/>
        public event CheckPhoneConfigCompletedEventHandler CheckPhoneConfigCompleted;
        
        /// <remarks/>
        public event AssociateDependenciesCompletedEventHandler AssociateDependenciesCompleted;
        
        /// <remarks/>
        public event DeleteModuleByKeyCompletedEventHandler DeleteModuleByKeyCompleted;
        
        /// <remarks/>
        public event ListReferenceableCompletedEventHandler ListReferenceableCompleted;
        
        /// <remarks/>
        public event GetReferenceDetailsCompletedEventHandler GetReferenceDetailsCompleted;
        
        /// <remarks/>
        public event GetDeveloperOperationsCompletedEventHandler GetDeveloperOperationsCompleted;
        
        /// <remarks/>
        public event DownloadCompletedEventHandler DownloadCompleted;
        
        /// <remarks/>
        public event TestActionCompletedEventHandler TestActionCompleted;
        
        /// <remarks/>
        public event DownloadByNameCompletedEventHandler DownloadByNameCompleted;
        
        /// <remarks/>
        public event DeleteProductLicenseCompletedEventHandler DeleteProductLicenseCompleted;
        
        /// <remarks/>
        public event GetHashset_FragmentsCompletedEventHandler GetHashset_FragmentsCompleted;
        
        /// <remarks/>
        public event GetPossibleEntryESpacesCompletedEventHandler GetPossibleEntryESpacesCompleted;
        
        /// <remarks/>
        public event ListExtensionsCompletedEventHandler ListExtensionsCompleted;
        
        /// <remarks/>
        public event Apps_GetAppDetailsCompletedEventHandler Apps_GetAppDetailsCompleted;
        
        /// <remarks/>
        public event GetConsumersCompletedEventHandler GetConsumersCompleted;
        
        /// <remarks/>
        public event DeleteByNameCompletedEventHandler DeleteByNameCompleted;
        
        /// <remarks/>
        public event GetPropertiesCompletedEventHandler GetPropertiesCompleted;
        
        /// <remarks/>
        public event UsesExternalAuthenticationCompletedEventHandler UsesExternalAuthenticationCompleted;
        
        /// <remarks/>
        public event Apps_RemoveModuleFromAppCompletedEventHandler Apps_RemoveModuleFromAppCompleted;
        
        /// <remarks/>
        public event GetPossibleBackOfficeESpacesCompletedEventHandler GetPossibleBackOfficeESpacesCompleted;
        
        /// <remarks/>
        public event PublishSolutionCompletedEventHandler PublishSolutionCompleted;
        
        /// <remarks/>
        public event GetEntityUsageDataCompletedEventHandler GetEntityUsageDataCompleted;
        
        /// <remarks/>
        public event GetInstallationKindCompletedEventHandler GetInstallationKindCompleted;
        
        /// <remarks/>
        public event ChangeCommitMessageCompletedEventHandler ChangeCommitMessageCompleted;
        
        /// <remarks/>
        public event RegisterOperationCompletedEventHandler RegisterOperationCompleted;
        
        /// <remarks/>
        public event Apps_DeleteAppCompletedEventHandler Apps_DeleteAppCompleted;
        
        /// <remarks/>
        public event UploadNeededCompletedEventHandler UploadNeededCompleted;
        
        /// <remarks/>
        public event GetAssemblyInfoCompletedEventHandler GetAssemblyInfoCompleted;
        
        /// <remarks/>
        public event UploadLicenseCompletedEventHandler UploadLicenseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UploadNew", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("eSpaceId")]
        public int UploadNew(string username, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] eSpace, int catalogId, string commitMessage, string applicationKey, bool replaceIfDifferentKey, out int versionId, out HEMessage[] messages, out bool existsWithDifferentKey) {
            object[] results = this.Invoke("UploadNew", new object[] {
                        username,
                        password,
                        eSpace,
                        catalogId,
                        commitMessage,
                        applicationKey,
                        replaceIfDifferentKey});
            versionId = ((int)(results[1]));
            messages = ((HEMessage[])(results[2]));
            existsWithDifferentKey = ((bool)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadNewAsync(string username, string password, byte[] eSpace, int catalogId, string commitMessage, string applicationKey, bool replaceIfDifferentKey) {
            this.UploadNewAsync(username, password, eSpace, catalogId, commitMessage, applicationKey, replaceIfDifferentKey, null);
        }
        
        /// <remarks/>
        public void UploadNewAsync(string username, string password, byte[] eSpace, int catalogId, string commitMessage, string applicationKey, bool replaceIfDifferentKey, object userState) {
            if ((this.UploadNewOperationCompleted == null)) {
                this.UploadNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadNewOperationCompleted);
            }
            this.InvokeAsync("UploadNew", new object[] {
                        username,
                        password,
                        eSpace,
                        catalogId,
                        commitMessage,
                        applicationKey,
                        replaceIfDifferentKey}, this.UploadNewOperationCompleted, userState);
        }
        
        private void OnUploadNewOperationCompleted(object arg) {
            if ((this.UploadNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadNewCompleted(this, new UploadNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListVersions", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("eSpaceVersions")]
        public ModuleInfo[] ListVersions(string username, string password, string eSpaceGUID) {
            object[] results = this.Invoke("ListVersions", new object[] {
                        username,
                        password,
                        eSpaceGUID});
            return ((ModuleInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ListVersionsAsync(string username, string password, string eSpaceGUID) {
            this.ListVersionsAsync(username, password, eSpaceGUID, null);
        }
        
        /// <remarks/>
        public void ListVersionsAsync(string username, string password, string eSpaceGUID, object userState) {
            if ((this.ListVersionsOperationCompleted == null)) {
                this.ListVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListVersionsOperationCompleted);
            }
            this.InvokeAsync("ListVersions", new object[] {
                        username,
                        password,
                        eSpaceGUID}, this.ListVersionsOperationCompleted, userState);
        }
        
        private void OnListVersionsOperationCompleted(object arg) {
            if ((this.ListVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListVersionsCompleted(this, new ListVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UploadAndPublishExtension", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] UploadAndPublishExtension(string username, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] extension, string commitMessage, string applicationKey, out int extensionId, out int extensionVersionId) {
            object[] results = this.Invoke("UploadAndPublishExtension", new object[] {
                        username,
                        password,
                        extension,
                        commitMessage,
                        applicationKey});
            extensionId = ((int)(results[1]));
            extensionVersionId = ((int)(results[2]));
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void UploadAndPublishExtensionAsync(string username, string password, byte[] extension, string commitMessage, string applicationKey) {
            this.UploadAndPublishExtensionAsync(username, password, extension, commitMessage, applicationKey, null);
        }
        
        /// <remarks/>
        public void UploadAndPublishExtensionAsync(string username, string password, byte[] extension, string commitMessage, string applicationKey, object userState) {
            if ((this.UploadAndPublishExtensionOperationCompleted == null)) {
                this.UploadAndPublishExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAndPublishExtensionOperationCompleted);
            }
            this.InvokeAsync("UploadAndPublishExtension", new object[] {
                        username,
                        password,
                        extension,
                        commitMessage,
                        applicationKey}, this.UploadAndPublishExtensionOperationCompleted, userState);
        }
        
        private void OnUploadAndPublishExtensionOperationCompleted(object arg) {
            if ((this.UploadAndPublishExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAndPublishExtensionCompleted(this, new UploadAndPublishExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/PushProducerToConsumer", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] PushProducerToConsumer(string username, string password, string producerName, string consumerName) {
            object[] results = this.Invoke("PushProducerToConsumer", new object[] {
                        username,
                        password,
                        producerName,
                        consumerName});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void PushProducerToConsumerAsync(string username, string password, string producerName, string consumerName) {
            this.PushProducerToConsumerAsync(username, password, producerName, consumerName, null);
        }
        
        /// <remarks/>
        public void PushProducerToConsumerAsync(string username, string password, string producerName, string consumerName, object userState) {
            if ((this.PushProducerToConsumerOperationCompleted == null)) {
                this.PushProducerToConsumerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPushProducerToConsumerOperationCompleted);
            }
            this.InvokeAsync("PushProducerToConsumer", new object[] {
                        username,
                        password,
                        producerName,
                        consumerName}, this.PushProducerToConsumerOperationCompleted, userState);
        }
        
        private void OnPushProducerToConsumerOperationCompleted(object arg) {
            if ((this.PushProducerToConsumerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PushProducerToConsumerCompleted(this, new PushProducerToConsumerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Metrics_Synchronized", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Metrics_Synchronized(Integer[] ListMonthIDs, Integer[] ListWeekIDs) {
            this.Invoke("Metrics_Synchronized", new object[] {
                        ListMonthIDs,
                        ListWeekIDs});
        }
        
        /// <remarks/>
        public void Metrics_SynchronizedAsync(Integer[] ListMonthIDs, Integer[] ListWeekIDs) {
            this.Metrics_SynchronizedAsync(ListMonthIDs, ListWeekIDs, null);
        }
        
        /// <remarks/>
        public void Metrics_SynchronizedAsync(Integer[] ListMonthIDs, Integer[] ListWeekIDs, object userState) {
            if ((this.Metrics_SynchronizedOperationCompleted == null)) {
                this.Metrics_SynchronizedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMetrics_SynchronizedOperationCompleted);
            }
            this.InvokeAsync("Metrics_Synchronized", new object[] {
                        ListMonthIDs,
                        ListWeekIDs}, this.Metrics_SynchronizedOperationCompleted, userState);
        }
        
        private void OnMetrics_SynchronizedOperationCompleted(object arg) {
            if ((this.Metrics_SynchronizedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Metrics_SynchronizedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/EspaceTenants", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("tenants")]
        public TenantType[] EspaceTenants(string username, string password, string eSpaceGUID) {
            object[] results = this.Invoke("EspaceTenants", new object[] {
                        username,
                        password,
                        eSpaceGUID});
            return ((TenantType[])(results[0]));
        }
        
        /// <remarks/>
        public void EspaceTenantsAsync(string username, string password, string eSpaceGUID) {
            this.EspaceTenantsAsync(username, password, eSpaceGUID, null);
        }
        
        /// <remarks/>
        public void EspaceTenantsAsync(string username, string password, string eSpaceGUID, object userState) {
            if ((this.EspaceTenantsOperationCompleted == null)) {
                this.EspaceTenantsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEspaceTenantsOperationCompleted);
            }
            this.InvokeAsync("EspaceTenants", new object[] {
                        username,
                        password,
                        eSpaceGUID}, this.EspaceTenantsOperationCompleted, userState);
        }
        
        private void OnEspaceTenantsOperationCompleted(object arg) {
            if ((this.EspaceTenantsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EspaceTenantsCompleted(this, new EspaceTenantsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetUserProviders", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("ProviderEspaceList")]
        public EspaceIdNameAndKey[] GetUserProviders(string username, string password, string SelfEspaceKey) {
            object[] results = this.Invoke("GetUserProviders", new object[] {
                        username,
                        password,
                        SelfEspaceKey});
            return ((EspaceIdNameAndKey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserProvidersAsync(string username, string password, string SelfEspaceKey) {
            this.GetUserProvidersAsync(username, password, SelfEspaceKey, null);
        }
        
        /// <remarks/>
        public void GetUserProvidersAsync(string username, string password, string SelfEspaceKey, object userState) {
            if ((this.GetUserProvidersOperationCompleted == null)) {
                this.GetUserProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProvidersOperationCompleted);
            }
            this.InvokeAsync("GetUserProviders", new object[] {
                        username,
                        password,
                        SelfEspaceKey}, this.GetUserProvidersOperationCompleted, userState);
        }
        
        private void OnGetUserProvidersOperationCompleted(object arg) {
            if ((this.GetUserProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserProvidersCompleted(this, new GetUserProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_ListApplications", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Applications")]
        public ApplicationInfo[] Apps_ListApplications(string username, string password, bool IncludeIcons) {
            object[] results = this.Invoke("Apps_ListApplications", new object[] {
                        username,
                        password,
                        IncludeIcons});
            return ((ApplicationInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void Apps_ListApplicationsAsync(string username, string password, bool IncludeIcons) {
            this.Apps_ListApplicationsAsync(username, password, IncludeIcons, null);
        }
        
        /// <remarks/>
        public void Apps_ListApplicationsAsync(string username, string password, bool IncludeIcons, object userState) {
            if ((this.Apps_ListApplicationsOperationCompleted == null)) {
                this.Apps_ListApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_ListApplicationsOperationCompleted);
            }
            this.InvokeAsync("Apps_ListApplications", new object[] {
                        username,
                        password,
                        IncludeIcons}, this.Apps_ListApplicationsOperationCompleted, userState);
        }
        
        private void OnApps_ListApplicationsOperationCompleted(object arg) {
            if ((this.Apps_ListApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_ListApplicationsCompleted(this, new Apps_ListApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/CheckAgainstServerVersion", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CatalogId")]
        public int CheckAgainstServerVersion(string username, string password, bool catalogIdNeeded, bool conflictCheckNeeded, string espaceKey, int lastSolvedConflictVersion, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] versionHistory, out int serverVersionComparedTo, out int conflictResult, out string uploadUser, out System.DateTime uploadDate) {
            object[] results = this.Invoke("CheckAgainstServerVersion", new object[] {
                        username,
                        password,
                        catalogIdNeeded,
                        conflictCheckNeeded,
                        espaceKey,
                        lastSolvedConflictVersion,
                        versionHistory});
            serverVersionComparedTo = ((int)(results[1]));
            conflictResult = ((int)(results[2]));
            uploadUser = ((string)(results[3]));
            uploadDate = ((System.DateTime)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAgainstServerVersionAsync(string username, string password, bool catalogIdNeeded, bool conflictCheckNeeded, string espaceKey, int lastSolvedConflictVersion, byte[] versionHistory) {
            this.CheckAgainstServerVersionAsync(username, password, catalogIdNeeded, conflictCheckNeeded, espaceKey, lastSolvedConflictVersion, versionHistory, null);
        }
        
        /// <remarks/>
        public void CheckAgainstServerVersionAsync(string username, string password, bool catalogIdNeeded, bool conflictCheckNeeded, string espaceKey, int lastSolvedConflictVersion, byte[] versionHistory, object userState) {
            if ((this.CheckAgainstServerVersionOperationCompleted == null)) {
                this.CheckAgainstServerVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAgainstServerVersionOperationCompleted);
            }
            this.InvokeAsync("CheckAgainstServerVersion", new object[] {
                        username,
                        password,
                        catalogIdNeeded,
                        conflictCheckNeeded,
                        espaceKey,
                        lastSolvedConflictVersion,
                        versionHistory}, this.CheckAgainstServerVersionOperationCompleted, userState);
        }
        
        private void OnCheckAgainstServerVersionOperationCompleted(object arg) {
            if ((this.CheckAgainstServerVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAgainstServerVersionCompleted(this, new CheckAgainstServerVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/CheckCompilation", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] CheckCompilation(string username, string password, int versionid) {
            object[] results = this.Invoke("CheckCompilation", new object[] {
                        username,
                        password,
                        versionid});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckCompilationAsync(string username, string password, int versionid) {
            this.CheckCompilationAsync(username, password, versionid, null);
        }
        
        /// <remarks/>
        public void CheckCompilationAsync(string username, string password, int versionid, object userState) {
            if ((this.CheckCompilationOperationCompleted == null)) {
                this.CheckCompilationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCompilationOperationCompleted);
            }
            this.InvokeAsync("CheckCompilation", new object[] {
                        username,
                        password,
                        versionid}, this.CheckCompilationOperationCompleted, userState);
        }
        
        private void OnCheckCompilationOperationCompleted(object arg) {
            if ((this.CheckCompilationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCompilationCompleted(this, new CheckCompilationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/CheckPublish", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] CheckPublish(string username, string password, int versionid) {
            object[] results = this.Invoke("CheckPublish", new object[] {
                        username,
                        password,
                        versionid});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckPublishAsync(string username, string password, int versionid) {
            this.CheckPublishAsync(username, password, versionid, null);
        }
        
        /// <remarks/>
        public void CheckPublishAsync(string username, string password, int versionid, object userState) {
            if ((this.CheckPublishOperationCompleted == null)) {
                this.CheckPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPublishOperationCompleted);
            }
            this.InvokeAsync("CheckPublish", new object[] {
                        username,
                        password,
                        versionid}, this.CheckPublishOperationCompleted, userState);
        }
        
        private void OnCheckPublishOperationCompleted(object arg) {
            if ((this.CheckPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPublishCompleted(this, new CheckPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Upload", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("eSpaceId")]
        public int Upload(string username, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] eSpace, int catalogId, string commitMessage, string applicationKey, out int versionId, out HEMessage[] messages, out bool existsWithDifferentKey) {
            object[] results = this.Invoke("Upload", new object[] {
                        username,
                        password,
                        eSpace,
                        catalogId,
                        commitMessage,
                        applicationKey});
            versionId = ((int)(results[1]));
            messages = ((HEMessage[])(results[2]));
            existsWithDifferentKey = ((bool)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAsync(string username, string password, byte[] eSpace, int catalogId, string commitMessage, string applicationKey) {
            this.UploadAsync(username, password, eSpace, catalogId, commitMessage, applicationKey, null);
        }
        
        /// <remarks/>
        public void UploadAsync(string username, string password, byte[] eSpace, int catalogId, string commitMessage, string applicationKey, object userState) {
            if ((this.UploadOperationCompleted == null)) {
                this.UploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOperationCompleted);
            }
            this.InvokeAsync("Upload", new object[] {
                        username,
                        password,
                        eSpace,
                        catalogId,
                        commitMessage,
                        applicationKey}, this.UploadOperationCompleted, userState);
        }
        
        private void OnUploadOperationCompleted(object arg) {
            if ((this.UploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCompleted(this, new UploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetEntryPoints", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("entryPoints")]
        public Area_Entry_Point[] GetEntryPoints(string username, string password, string espaceGUID, bool inPTA) {
            object[] results = this.Invoke("GetEntryPoints", new object[] {
                        username,
                        password,
                        espaceGUID,
                        inPTA});
            return ((Area_Entry_Point[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEntryPointsAsync(string username, string password, string espaceGUID, bool inPTA) {
            this.GetEntryPointsAsync(username, password, espaceGUID, inPTA, null);
        }
        
        /// <remarks/>
        public void GetEntryPointsAsync(string username, string password, string espaceGUID, bool inPTA, object userState) {
            if ((this.GetEntryPointsOperationCompleted == null)) {
                this.GetEntryPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntryPointsOperationCompleted);
            }
            this.InvokeAsync("GetEntryPoints", new object[] {
                        username,
                        password,
                        espaceGUID,
                        inPTA}, this.GetEntryPointsOperationCompleted, userState);
        }
        
        private void OnGetEntryPointsOperationCompleted(object arg) {
            if ((this.GetEntryPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntryPointsCompleted(this, new GetEntryPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListEspaces", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("eSpaces")]
        public ModuleInfo[] ListEspaces(string username, string password) {
            object[] results = this.Invoke("ListEspaces", new object[] {
                        username,
                        password});
            return ((ModuleInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ListEspacesAsync(string username, string password) {
            this.ListEspacesAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ListEspacesAsync(string username, string password, object userState) {
            if ((this.ListEspacesOperationCompleted == null)) {
                this.ListEspacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListEspacesOperationCompleted);
            }
            this.InvokeAsync("ListEspaces", new object[] {
                        username,
                        password}, this.ListEspacesOperationCompleted, userState);
        }
        
        private void OnListEspacesOperationCompleted(object arg) {
            if ((this.ListEspacesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListEspacesCompleted(this, new ListEspacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListCommits", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("eSpaceCommits")]
        public WORCCommitExtraInfoModuleInfoRecord[] ListCommits(string username, string password, int eSpacesStartVersion, int extensionsStartVersion, System.DateTime startDate, out WORCCommitExtraInfoModuleInfoRecord[] extensionCommits) {
            object[] results = this.Invoke("ListCommits", new object[] {
                        username,
                        password,
                        eSpacesStartVersion,
                        extensionsStartVersion,
                        startDate});
            extensionCommits = ((WORCCommitExtraInfoModuleInfoRecord[])(results[1]));
            return ((WORCCommitExtraInfoModuleInfoRecord[])(results[0]));
        }
        
        /// <remarks/>
        public void ListCommitsAsync(string username, string password, int eSpacesStartVersion, int extensionsStartVersion, System.DateTime startDate) {
            this.ListCommitsAsync(username, password, eSpacesStartVersion, extensionsStartVersion, startDate, null);
        }
        
        /// <remarks/>
        public void ListCommitsAsync(string username, string password, int eSpacesStartVersion, int extensionsStartVersion, System.DateTime startDate, object userState) {
            if ((this.ListCommitsOperationCompleted == null)) {
                this.ListCommitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListCommitsOperationCompleted);
            }
            this.InvokeAsync("ListCommits", new object[] {
                        username,
                        password,
                        eSpacesStartVersion,
                        extensionsStartVersion,
                        startDate}, this.ListCommitsOperationCompleted, userState);
        }
        
        private void OnListCommitsOperationCompleted(object arg) {
            if ((this.ListCommitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListCommitsCompleted(this, new ListCommitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UploadProductLicense", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("success")]
        public bool UploadProductLicense(string username, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, out string responseText) {
            object[] results = this.Invoke("UploadProductLicense", new object[] {
                        username,
                        password,
                        fileContent});
            responseText = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadProductLicenseAsync(string username, string password, byte[] fileContent) {
            this.UploadProductLicenseAsync(username, password, fileContent, null);
        }
        
        /// <remarks/>
        public void UploadProductLicenseAsync(string username, string password, byte[] fileContent, object userState) {
            if ((this.UploadProductLicenseOperationCompleted == null)) {
                this.UploadProductLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProductLicenseOperationCompleted);
            }
            this.InvokeAsync("UploadProductLicense", new object[] {
                        username,
                        password,
                        fileContent}, this.UploadProductLicenseOperationCompleted, userState);
        }
        
        private void OnUploadProductLicenseOperationCompleted(object arg) {
            if ((this.UploadProductLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProductLicenseCompleted(this, new UploadProductLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetMessagesSolution", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Messages")]
        public HEMessage[] GetMessagesSolution(string username, string password, int SolutionPubId, int LastSeenId, out int LastMessageId) {
            object[] results = this.Invoke("GetMessagesSolution", new object[] {
                        username,
                        password,
                        SolutionPubId,
                        LastSeenId});
            LastMessageId = ((int)(results[1]));
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesSolutionAsync(string username, string password, int SolutionPubId, int LastSeenId) {
            this.GetMessagesSolutionAsync(username, password, SolutionPubId, LastSeenId, null);
        }
        
        /// <remarks/>
        public void GetMessagesSolutionAsync(string username, string password, int SolutionPubId, int LastSeenId, object userState) {
            if ((this.GetMessagesSolutionOperationCompleted == null)) {
                this.GetMessagesSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesSolutionOperationCompleted);
            }
            this.InvokeAsync("GetMessagesSolution", new object[] {
                        username,
                        password,
                        SolutionPubId,
                        LastSeenId}, this.GetMessagesSolutionOperationCompleted, userState);
        }
        
        private void OnGetMessagesSolutionOperationCompleted(object arg) {
            if ((this.GetMessagesSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesSolutionCompleted(this, new GetMessagesSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListSolutionComponents", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("solutionComponents")]
        public SolutionComponent[] ListSolutionComponents(string username, string password, string solutionName) {
            object[] results = this.Invoke("ListSolutionComponents", new object[] {
                        username,
                        password,
                        solutionName});
            return ((SolutionComponent[])(results[0]));
        }
        
        /// <remarks/>
        public void ListSolutionComponentsAsync(string username, string password, string solutionName) {
            this.ListSolutionComponentsAsync(username, password, solutionName, null);
        }
        
        /// <remarks/>
        public void ListSolutionComponentsAsync(string username, string password, string solutionName, object userState) {
            if ((this.ListSolutionComponentsOperationCompleted == null)) {
                this.ListSolutionComponentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListSolutionComponentsOperationCompleted);
            }
            this.InvokeAsync("ListSolutionComponents", new object[] {
                        username,
                        password,
                        solutionName}, this.ListSolutionComponentsOperationCompleted, userState);
        }
        
        private void OnListSolutionComponentsOperationCompleted(object arg) {
            if ((this.ListSolutionComponentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListSolutionComponentsCompleted(this, new ListSolutionComponentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetProfilerMetrics", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("EspaceProfileData")]
        public Binary[] GetProfilerMetrics(string username, string password, string EspaceKey) {
            object[] results = this.Invoke("GetProfilerMetrics", new object[] {
                        username,
                        password,
                        EspaceKey});
            return ((Binary[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProfilerMetricsAsync(string username, string password, string EspaceKey) {
            this.GetProfilerMetricsAsync(username, password, EspaceKey, null);
        }
        
        /// <remarks/>
        public void GetProfilerMetricsAsync(string username, string password, string EspaceKey, object userState) {
            if ((this.GetProfilerMetricsOperationCompleted == null)) {
                this.GetProfilerMetricsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfilerMetricsOperationCompleted);
            }
            this.InvokeAsync("GetProfilerMetrics", new object[] {
                        username,
                        password,
                        EspaceKey}, this.GetProfilerMetricsOperationCompleted, userState);
        }
        
        private void OnGetProfilerMetricsOperationCompleted(object arg) {
            if ((this.GetProfilerMetricsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfilerMetricsCompleted(this, new GetProfilerMetricsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/TestQuery", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ResultCode")]
        public string TestQuery(string username, string password, string espaceKey, int TenantID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] OML, out string ExecutedSQL, out string QueryResult, out string ErrorText, out string AdvancedSQL) {
            object[] results = this.Invoke("TestQuery", new object[] {
                        username,
                        password,
                        espaceKey,
                        TenantID,
                        OML});
            ExecutedSQL = ((string)(results[1]));
            QueryResult = ((string)(results[2]));
            ErrorText = ((string)(results[3]));
            AdvancedSQL = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestQueryAsync(string username, string password, string espaceKey, int TenantID, byte[] OML) {
            this.TestQueryAsync(username, password, espaceKey, TenantID, OML, null);
        }
        
        /// <remarks/>
        public void TestQueryAsync(string username, string password, string espaceKey, int TenantID, byte[] OML, object userState) {
            if ((this.TestQueryOperationCompleted == null)) {
                this.TestQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestQueryOperationCompleted);
            }
            this.InvokeAsync("TestQuery", new object[] {
                        username,
                        password,
                        espaceKey,
                        TenantID,
                        OML}, this.TestQueryOperationCompleted, userState);
        }
        
        private void OnTestQueryOperationCompleted(object arg) {
            if ((this.TestQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestQueryCompleted(this, new TestQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Metrics_Fetch", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Metrics")]
        public string Metrics_Fetch(out Integer[] ListMonthIDs, out Integer[] ListWeekIDs) {
            object[] results = this.Invoke("Metrics_Fetch", new object[0]);
            ListMonthIDs = ((Integer[])(results[1]));
            ListWeekIDs = ((Integer[])(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Metrics_FetchAsync() {
            this.Metrics_FetchAsync(null);
        }
        
        /// <remarks/>
        public void Metrics_FetchAsync(object userState) {
            if ((this.Metrics_FetchOperationCompleted == null)) {
                this.Metrics_FetchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMetrics_FetchOperationCompleted);
            }
            this.InvokeAsync("Metrics_Fetch", new object[0], this.Metrics_FetchOperationCompleted, userState);
        }
        
        private void OnMetrics_FetchOperationCompleted(object arg) {
            if ((this.Metrics_FetchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Metrics_FetchCompleted(this, new Metrics_FetchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_CreateOrUpdateApp", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public HEMessage Apps_CreateOrUpdateApp(string username, string password, ApplicationInfo ApplicationInfo, out bool success) {
            object[] results = this.Invoke("Apps_CreateOrUpdateApp", new object[] {
                        username,
                        password,
                        ApplicationInfo});
            success = ((bool)(results[1]));
            return ((HEMessage)(results[0]));
        }
        
        /// <remarks/>
        public void Apps_CreateOrUpdateAppAsync(string username, string password, ApplicationInfo ApplicationInfo) {
            this.Apps_CreateOrUpdateAppAsync(username, password, ApplicationInfo, null);
        }
        
        /// <remarks/>
        public void Apps_CreateOrUpdateAppAsync(string username, string password, ApplicationInfo ApplicationInfo, object userState) {
            if ((this.Apps_CreateOrUpdateAppOperationCompleted == null)) {
                this.Apps_CreateOrUpdateAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_CreateOrUpdateAppOperationCompleted);
            }
            this.InvokeAsync("Apps_CreateOrUpdateApp", new object[] {
                        username,
                        password,
                        ApplicationInfo}, this.Apps_CreateOrUpdateAppOperationCompleted, userState);
        }
        
        private void OnApps_CreateOrUpdateAppOperationCompleted(object arg) {
            if ((this.Apps_CreateOrUpdateAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_CreateOrUpdateAppCompleted(this, new Apps_CreateOrUpdateAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Compile", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] Compile(string username, string password, int versionid, string reuseTablesOnMove) {
            object[] results = this.Invoke("Compile", new object[] {
                        username,
                        password,
                        versionid,
                        reuseTablesOnMove});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void CompileAsync(string username, string password, int versionid, string reuseTablesOnMove) {
            this.CompileAsync(username, password, versionid, reuseTablesOnMove, null);
        }
        
        /// <remarks/>
        public void CompileAsync(string username, string password, int versionid, string reuseTablesOnMove, object userState) {
            if ((this.CompileOperationCompleted == null)) {
                this.CompileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompileOperationCompleted);
            }
            this.InvokeAsync("Compile", new object[] {
                        username,
                        password,
                        versionid,
                        reuseTablesOnMove}, this.CompileOperationCompleted, userState);
        }
        
        private void OnCompileOperationCompleted(object arg) {
            if ((this.CompileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompileCompleted(this, new CompileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/PublishPTA", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] PublishPTA(string username, string password, string espacename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] partialoml, string uid, bool SkipDeploy, out string errorMessage, out string errorCode) {
            object[] results = this.Invoke("PublishPTA", new object[] {
                        username,
                        password,
                        espacename,
                        partialoml,
                        uid,
                        SkipDeploy});
            errorMessage = ((string)(results[1]));
            errorCode = ((string)(results[2]));
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void PublishPTAAsync(string username, string password, string espacename, byte[] partialoml, string uid, bool SkipDeploy) {
            this.PublishPTAAsync(username, password, espacename, partialoml, uid, SkipDeploy, null);
        }
        
        /// <remarks/>
        public void PublishPTAAsync(string username, string password, string espacename, byte[] partialoml, string uid, bool SkipDeploy, object userState) {
            if ((this.PublishPTAOperationCompleted == null)) {
                this.PublishPTAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishPTAOperationCompleted);
            }
            this.InvokeAsync("PublishPTA", new object[] {
                        username,
                        password,
                        espacename,
                        partialoml,
                        uid,
                        SkipDeploy}, this.PublishPTAOperationCompleted, userState);
        }
        
        private void OnPublishPTAOperationCompleted(object arg) {
            if ((this.PublishPTACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishPTACompleted(this, new PublishPTACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListCatalogs", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Catalogs")]
        public DBCatalogInfo[] ListCatalogs(string username, string password, out string Status) {
            object[] results = this.Invoke("ListCatalogs", new object[] {
                        username,
                        password});
            Status = ((string)(results[1]));
            return ((DBCatalogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ListCatalogsAsync(string username, string password) {
            this.ListCatalogsAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ListCatalogsAsync(string username, string password, object userState) {
            if ((this.ListCatalogsOperationCompleted == null)) {
                this.ListCatalogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListCatalogsOperationCompleted);
            }
            this.InvokeAsync("ListCatalogs", new object[] {
                        username,
                        password}, this.ListCatalogsOperationCompleted, userState);
        }
        
        private void OnListCatalogsOperationCompleted(object arg) {
            if ((this.ListCatalogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListCatalogsCompleted(this, new ListCatalogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ImportTable", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errorText")]
        public string ImportTable(string username, string password, string entityGUID, string espaceGUID, out AbstractRecord[] tableData, out Entity_Record[] existingRecords) {
            object[] results = this.Invoke("ImportTable", new object[] {
                        username,
                        password,
                        entityGUID,
                        espaceGUID});
            tableData = ((AbstractRecord[])(results[1]));
            existingRecords = ((Entity_Record[])(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportTableAsync(string username, string password, string entityGUID, string espaceGUID) {
            this.ImportTableAsync(username, password, entityGUID, espaceGUID, null);
        }
        
        /// <remarks/>
        public void ImportTableAsync(string username, string password, string entityGUID, string espaceGUID, object userState) {
            if ((this.ImportTableOperationCompleted == null)) {
                this.ImportTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportTableOperationCompleted);
            }
            this.InvokeAsync("ImportTable", new object[] {
                        username,
                        password,
                        entityGUID,
                        espaceGUID}, this.ImportTableOperationCompleted, userState);
        }
        
        private void OnImportTableOperationCompleted(object arg) {
            if ((this.ImportTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportTableCompleted(this, new ImportTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetLicenseInformation", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("licenseInfo")]
        public ActivationLicenseInformation GetLicenseInformation(string username, string password, out SS_LicensingFeatureInfo softwareUnits, out SS_LicensingFeatureInfo namedUsers, out System.DateTime serverDate, out bool trialCommunityInstalled) {
            object[] results = this.Invoke("GetLicenseInformation", new object[] {
                        username,
                        password});
            softwareUnits = ((SS_LicensingFeatureInfo)(results[1]));
            namedUsers = ((SS_LicensingFeatureInfo)(results[2]));
            serverDate = ((System.DateTime)(results[3]));
            trialCommunityInstalled = ((bool)(results[4]));
            return ((ActivationLicenseInformation)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseInformationAsync(string username, string password) {
            this.GetLicenseInformationAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetLicenseInformationAsync(string username, string password, object userState) {
            if ((this.GetLicenseInformationOperationCompleted == null)) {
                this.GetLicenseInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseInformationOperationCompleted);
            }
            this.InvokeAsync("GetLicenseInformation", new object[] {
                        username,
                        password}, this.GetLicenseInformationOperationCompleted, userState);
        }
        
        private void OnGetLicenseInformationOperationCompleted(object arg) {
            if ((this.GetLicenseInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseInformationCompleted(this, new GetLicenseInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Publish", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] Publish(string username, string password, int versionid) {
            object[] results = this.Invoke("Publish", new object[] {
                        username,
                        password,
                        versionid});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void PublishAsync(string username, string password, int versionid) {
            this.PublishAsync(username, password, versionid, null);
        }
        
        /// <remarks/>
        public void PublishAsync(string username, string password, int versionid, object userState) {
            if ((this.PublishOperationCompleted == null)) {
                this.PublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishOperationCompleted);
            }
            this.InvokeAsync("Publish", new object[] {
                        username,
                        password,
                        versionid}, this.PublishOperationCompleted, userState);
        }
        
        private void OnPublishOperationCompleted(object arg) {
            if ((this.PublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCompleted(this, new PublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Handshake", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ok")]
        public bool Handshake(string username, string password, string version, string lastUpVersion, out string error) {
            object[] results = this.Invoke("Handshake", new object[] {
                        username,
                        password,
                        version,
                        lastUpVersion});
            error = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HandshakeAsync(string username, string password, string version, string lastUpVersion) {
            this.HandshakeAsync(username, password, version, lastUpVersion, null);
        }
        
        /// <remarks/>
        public void HandshakeAsync(string username, string password, string version, string lastUpVersion, object userState) {
            if ((this.HandshakeOperationCompleted == null)) {
                this.HandshakeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHandshakeOperationCompleted);
            }
            this.InvokeAsync("Handshake", new object[] {
                        username,
                        password,
                        version,
                        lastUpVersion}, this.HandshakeOperationCompleted, userState);
        }
        
        private void OnHandshakeOperationCompleted(object arg) {
            if ((this.HandshakeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HandshakeCompleted(this, new HandshakeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetProductUrl", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("URL")]
        public string GetProductUrl(string ProductId) {
            object[] results = this.Invoke("GetProductUrl", new object[] {
                        ProductId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductUrlAsync(string ProductId) {
            this.GetProductUrlAsync(ProductId, null);
        }
        
        /// <remarks/>
        public void GetProductUrlAsync(string ProductId, object userState) {
            if ((this.GetProductUrlOperationCompleted == null)) {
                this.GetProductUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductUrlOperationCompleted);
            }
            this.InvokeAsync("GetProductUrl", new object[] {
                        ProductId}, this.GetProductUrlOperationCompleted, userState);
        }
        
        private void OnGetProductUrlOperationCompleted(object arg) {
            if ((this.GetProductUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductUrlCompleted(this, new GetProductUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/CanOpenOml", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("EncryptedResponse")]
        public string CanOpenOml(string username, string password, string EncryptedRequest) {
            object[] results = this.Invoke("CanOpenOml", new object[] {
                        username,
                        password,
                        EncryptedRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CanOpenOmlAsync(string username, string password, string EncryptedRequest) {
            this.CanOpenOmlAsync(username, password, EncryptedRequest, null);
        }
        
        /// <remarks/>
        public void CanOpenOmlAsync(string username, string password, string EncryptedRequest, object userState) {
            if ((this.CanOpenOmlOperationCompleted == null)) {
                this.CanOpenOmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanOpenOmlOperationCompleted);
            }
            this.InvokeAsync("CanOpenOml", new object[] {
                        username,
                        password,
                        EncryptedRequest}, this.CanOpenOmlOperationCompleted, userState);
        }
        
        private void OnCanOpenOmlOperationCompleted(object arg) {
            if ((this.CanOpenOmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanOpenOmlCompleted(this, new CanOpenOmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_AddModuleToApp", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public HEMessage Apps_AddModuleToApp(string username, string password, string AppKey, string ModuleKind, string ModuleKey, out bool success) {
            object[] results = this.Invoke("Apps_AddModuleToApp", new object[] {
                        username,
                        password,
                        AppKey,
                        ModuleKind,
                        ModuleKey});
            success = ((bool)(results[1]));
            return ((HEMessage)(results[0]));
        }
        
        /// <remarks/>
        public void Apps_AddModuleToAppAsync(string username, string password, string AppKey, string ModuleKind, string ModuleKey) {
            this.Apps_AddModuleToAppAsync(username, password, AppKey, ModuleKind, ModuleKey, null);
        }
        
        /// <remarks/>
        public void Apps_AddModuleToAppAsync(string username, string password, string AppKey, string ModuleKind, string ModuleKey, object userState) {
            if ((this.Apps_AddModuleToAppOperationCompleted == null)) {
                this.Apps_AddModuleToAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_AddModuleToAppOperationCompleted);
            }
            this.InvokeAsync("Apps_AddModuleToApp", new object[] {
                        username,
                        password,
                        AppKey,
                        ModuleKind,
                        ModuleKey}, this.Apps_AddModuleToAppOperationCompleted, userState);
        }
        
        private void OnApps_AddModuleToAppOperationCompleted(object arg) {
            if ((this.Apps_AddModuleToAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_AddModuleToAppCompleted(this, new Apps_AddModuleToAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/DownloadExtension", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("extension", DataType="base64Binary")]
        public byte[] DownloadExtension(string username, string password, string extensionKey, int versionId) {
            object[] results = this.Invoke("DownloadExtension", new object[] {
                        username,
                        password,
                        extensionKey,
                        versionId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadExtensionAsync(string username, string password, string extensionKey, int versionId) {
            this.DownloadExtensionAsync(username, password, extensionKey, versionId, null);
        }
        
        /// <remarks/>
        public void DownloadExtensionAsync(string username, string password, string extensionKey, int versionId, object userState) {
            if ((this.DownloadExtensionOperationCompleted == null)) {
                this.DownloadExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadExtensionOperationCompleted);
            }
            this.InvokeAsync("DownloadExtension", new object[] {
                        username,
                        password,
                        extensionKey,
                        versionId}, this.DownloadExtensionOperationCompleted, userState);
        }
        
        private void OnDownloadExtensionOperationCompleted(object arg) {
            if ((this.DownloadExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadExtensionCompleted(this, new DownloadExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetEspaceId", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("EspaceId")]
        public int GetEspaceId(string Username, string Password, string EspaceKey) {
            object[] results = this.Invoke("GetEspaceId", new object[] {
                        Username,
                        Password,
                        EspaceKey});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetEspaceIdAsync(string Username, string Password, string EspaceKey) {
            this.GetEspaceIdAsync(Username, Password, EspaceKey, null);
        }
        
        /// <remarks/>
        public void GetEspaceIdAsync(string Username, string Password, string EspaceKey, object userState) {
            if ((this.GetEspaceIdOperationCompleted == null)) {
                this.GetEspaceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEspaceIdOperationCompleted);
            }
            this.InvokeAsync("GetEspaceId", new object[] {
                        Username,
                        Password,
                        EspaceKey}, this.GetEspaceIdOperationCompleted, userState);
        }
        
        private void OnGetEspaceIdOperationCompleted(object arg) {
            if ((this.GetEspaceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEspaceIdCompleted(this, new GetEspaceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/CheckPhoneConfig", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("valid")]
        public string CheckPhoneConfig(string username, string password, string espaceGUID, string tenantname) {
            object[] results = this.Invoke("CheckPhoneConfig", new object[] {
                        username,
                        password,
                        espaceGUID,
                        tenantname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPhoneConfigAsync(string username, string password, string espaceGUID, string tenantname) {
            this.CheckPhoneConfigAsync(username, password, espaceGUID, tenantname, null);
        }
        
        /// <remarks/>
        public void CheckPhoneConfigAsync(string username, string password, string espaceGUID, string tenantname, object userState) {
            if ((this.CheckPhoneConfigOperationCompleted == null)) {
                this.CheckPhoneConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPhoneConfigOperationCompleted);
            }
            this.InvokeAsync("CheckPhoneConfig", new object[] {
                        username,
                        password,
                        espaceGUID,
                        tenantname}, this.CheckPhoneConfigOperationCompleted, userState);
        }
        
        private void OnCheckPhoneConfigOperationCompleted(object arg) {
            if ((this.CheckPhoneConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPhoneConfigCompleted(this, new CheckPhoneConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/AssociateDependencies", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] AssociateDependencies(string username, string password, int versionid) {
            object[] results = this.Invoke("AssociateDependencies", new object[] {
                        username,
                        password,
                        versionid});
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void AssociateDependenciesAsync(string username, string password, int versionid) {
            this.AssociateDependenciesAsync(username, password, versionid, null);
        }
        
        /// <remarks/>
        public void AssociateDependenciesAsync(string username, string password, int versionid, object userState) {
            if ((this.AssociateDependenciesOperationCompleted == null)) {
                this.AssociateDependenciesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssociateDependenciesOperationCompleted);
            }
            this.InvokeAsync("AssociateDependencies", new object[] {
                        username,
                        password,
                        versionid}, this.AssociateDependenciesOperationCompleted, userState);
        }
        
        private void OnAssociateDependenciesOperationCompleted(object arg) {
            if ((this.AssociateDependenciesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssociateDependenciesCompleted(this, new AssociateDependenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/DeleteModuleByKey", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public HEMessage DeleteModuleByKey(string username, string password, string ModuleKey, string ModuleKind, out bool success) {
            object[] results = this.Invoke("DeleteModuleByKey", new object[] {
                        username,
                        password,
                        ModuleKey,
                        ModuleKind});
            success = ((bool)(results[1]));
            return ((HEMessage)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteModuleByKeyAsync(string username, string password, string ModuleKey, string ModuleKind) {
            this.DeleteModuleByKeyAsync(username, password, ModuleKey, ModuleKind, null);
        }
        
        /// <remarks/>
        public void DeleteModuleByKeyAsync(string username, string password, string ModuleKey, string ModuleKind, object userState) {
            if ((this.DeleteModuleByKeyOperationCompleted == null)) {
                this.DeleteModuleByKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteModuleByKeyOperationCompleted);
            }
            this.InvokeAsync("DeleteModuleByKey", new object[] {
                        username,
                        password,
                        ModuleKey,
                        ModuleKind}, this.DeleteModuleByKeyOperationCompleted, userState);
        }
        
        private void OnDeleteModuleByKeyOperationCompleted(object arg) {
            if ((this.DeleteModuleByKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteModuleByKeyCompleted(this, new DeleteModuleByKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListReferenceable", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("RefList")]
        public ReferenceType[] ListReferenceable(string username, string password, out string Status) {
            object[] results = this.Invoke("ListReferenceable", new object[] {
                        username,
                        password});
            Status = ((string)(results[1]));
            return ((ReferenceType[])(results[0]));
        }
        
        /// <remarks/>
        public void ListReferenceableAsync(string username, string password) {
            this.ListReferenceableAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ListReferenceableAsync(string username, string password, object userState) {
            if ((this.ListReferenceableOperationCompleted == null)) {
                this.ListReferenceableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListReferenceableOperationCompleted);
            }
            this.InvokeAsync("ListReferenceable", new object[] {
                        username,
                        password}, this.ListReferenceableOperationCompleted, userState);
        }
        
        private void OnListReferenceableOperationCompleted(object arg) {
            if ((this.ListReferenceableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListReferenceableCompleted(this, new ListReferenceableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetReferenceDetails", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Details")]
        public ReferenceType GetReferenceDetails(string Key, string Kind, string username, string password, out string Status) {
            object[] results = this.Invoke("GetReferenceDetails", new object[] {
                        Key,
                        Kind,
                        username,
                        password});
            Status = ((string)(results[1]));
            return ((ReferenceType)(results[0]));
        }
        
        /// <remarks/>
        public void GetReferenceDetailsAsync(string Key, string Kind, string username, string password) {
            this.GetReferenceDetailsAsync(Key, Kind, username, password, null);
        }
        
        /// <remarks/>
        public void GetReferenceDetailsAsync(string Key, string Kind, string username, string password, object userState) {
            if ((this.GetReferenceDetailsOperationCompleted == null)) {
                this.GetReferenceDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReferenceDetailsOperationCompleted);
            }
            this.InvokeAsync("GetReferenceDetails", new object[] {
                        Key,
                        Kind,
                        username,
                        password}, this.GetReferenceDetailsOperationCompleted, userState);
        }
        
        private void OnGetReferenceDetailsOperationCompleted(object arg) {
            if ((this.GetReferenceDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReferenceDetailsCompleted(this, new GetReferenceDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetDeveloperOperations", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("operations")]
        public DeveloperOperation[] GetDeveloperOperations(string username, string password, System.DateTime startDate) {
            object[] results = this.Invoke("GetDeveloperOperations", new object[] {
                        username,
                        password,
                        startDate});
            return ((DeveloperOperation[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDeveloperOperationsAsync(string username, string password, System.DateTime startDate) {
            this.GetDeveloperOperationsAsync(username, password, startDate, null);
        }
        
        /// <remarks/>
        public void GetDeveloperOperationsAsync(string username, string password, System.DateTime startDate, object userState) {
            if ((this.GetDeveloperOperationsOperationCompleted == null)) {
                this.GetDeveloperOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeveloperOperationsOperationCompleted);
            }
            this.InvokeAsync("GetDeveloperOperations", new object[] {
                        username,
                        password,
                        startDate}, this.GetDeveloperOperationsOperationCompleted, userState);
        }
        
        private void OnGetDeveloperOperationsOperationCompleted(object arg) {
            if ((this.GetDeveloperOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeveloperOperationsCompleted(this, new GetDeveloperOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Download", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("eSpace", DataType="base64Binary")]
        public byte[] Download(string username, string password, int versionId, string eSpaceGUID, out System.DateTime uploadDate, out string uploadUser, out bool isPublishedVersion, out HEMessage message, out bool success) {
            object[] results = this.Invoke("Download", new object[] {
                        username,
                        password,
                        versionId,
                        eSpaceGUID});
            uploadDate = ((System.DateTime)(results[1]));
            uploadUser = ((string)(results[2]));
            isPublishedVersion = ((bool)(results[3]));
            message = ((HEMessage)(results[4]));
            success = ((bool)(results[5]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadAsync(string username, string password, int versionId, string eSpaceGUID) {
            this.DownloadAsync(username, password, versionId, eSpaceGUID, null);
        }
        
        /// <remarks/>
        public void DownloadAsync(string username, string password, int versionId, string eSpaceGUID, object userState) {
            if ((this.DownloadOperationCompleted == null)) {
                this.DownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadOperationCompleted);
            }
            this.InvokeAsync("Download", new object[] {
                        username,
                        password,
                        versionId,
                        eSpaceGUID}, this.DownloadOperationCompleted, userState);
        }
        
        private void OnDownloadOperationCompleted(object arg) {
            if ((this.DownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadCompleted(this, new DownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/TestAction", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ResultCode")]
        public string TestAction(string username, string password, string ESpaceName, string Action, Text[] Parameters, out string Result, out string ErrorText) {
            object[] results = this.Invoke("TestAction", new object[] {
                        username,
                        password,
                        ESpaceName,
                        Action,
                        Parameters});
            Result = ((string)(results[1]));
            ErrorText = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestActionAsync(string username, string password, string ESpaceName, string Action, Text[] Parameters) {
            this.TestActionAsync(username, password, ESpaceName, Action, Parameters, null);
        }
        
        /// <remarks/>
        public void TestActionAsync(string username, string password, string ESpaceName, string Action, Text[] Parameters, object userState) {
            if ((this.TestActionOperationCompleted == null)) {
                this.TestActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestActionOperationCompleted);
            }
            this.InvokeAsync("TestAction", new object[] {
                        username,
                        password,
                        ESpaceName,
                        Action,
                        Parameters}, this.TestActionOperationCompleted, userState);
        }
        
        private void OnTestActionOperationCompleted(object arg) {
            if ((this.TestActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestActionCompleted(this, new TestActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/DownloadByName", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("eSpace", DataType="base64Binary")]
        public byte[] DownloadByName(string username, string password, int versionId, string eSpaceName, out System.DateTime uploadDate, out string uploadUser, out bool isPublishedVersion, out HEMessage message, out bool success) {
            object[] results = this.Invoke("DownloadByName", new object[] {
                        username,
                        password,
                        versionId,
                        eSpaceName});
            uploadDate = ((System.DateTime)(results[1]));
            uploadUser = ((string)(results[2]));
            isPublishedVersion = ((bool)(results[3]));
            message = ((HEMessage)(results[4]));
            success = ((bool)(results[5]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadByNameAsync(string username, string password, int versionId, string eSpaceName) {
            this.DownloadByNameAsync(username, password, versionId, eSpaceName, null);
        }
        
        /// <remarks/>
        public void DownloadByNameAsync(string username, string password, int versionId, string eSpaceName, object userState) {
            if ((this.DownloadByNameOperationCompleted == null)) {
                this.DownloadByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadByNameOperationCompleted);
            }
            this.InvokeAsync("DownloadByName", new object[] {
                        username,
                        password,
                        versionId,
                        eSpaceName}, this.DownloadByNameOperationCompleted, userState);
        }
        
        private void OnDownloadByNameOperationCompleted(object arg) {
            if ((this.DownloadByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadByNameCompleted(this, new DownloadByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/DeleteProductLicense", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("success")]
        public bool DeleteProductLicense(string username, string password, string product_Id, out string responseText) {
            object[] results = this.Invoke("DeleteProductLicense", new object[] {
                        username,
                        password,
                        product_Id});
            responseText = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProductLicenseAsync(string username, string password, string product_Id) {
            this.DeleteProductLicenseAsync(username, password, product_Id, null);
        }
        
        /// <remarks/>
        public void DeleteProductLicenseAsync(string username, string password, string product_Id, object userState) {
            if ((this.DeleteProductLicenseOperationCompleted == null)) {
                this.DeleteProductLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProductLicenseOperationCompleted);
            }
            this.InvokeAsync("DeleteProductLicense", new object[] {
                        username,
                        password,
                        product_Id}, this.DeleteProductLicenseOperationCompleted, userState);
        }
        
        private void OnDeleteProductLicenseOperationCompleted(object arg) {
            if ((this.DeleteProductLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProductLicenseCompleted(this, new DeleteProductLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetHashset_Fragments", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("versionId")]
        public string GetHashset_Fragments(string username, string password, string espaceGUID, int lastVersionId, out string hashset, out string statusCode, out string fragments) {
            object[] results = this.Invoke("GetHashset_Fragments", new object[] {
                        username,
                        password,
                        espaceGUID,
                        lastVersionId});
            hashset = ((string)(results[1]));
            statusCode = ((string)(results[2]));
            fragments = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHashset_FragmentsAsync(string username, string password, string espaceGUID, int lastVersionId) {
            this.GetHashset_FragmentsAsync(username, password, espaceGUID, lastVersionId, null);
        }
        
        /// <remarks/>
        public void GetHashset_FragmentsAsync(string username, string password, string espaceGUID, int lastVersionId, object userState) {
            if ((this.GetHashset_FragmentsOperationCompleted == null)) {
                this.GetHashset_FragmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHashset_FragmentsOperationCompleted);
            }
            this.InvokeAsync("GetHashset_Fragments", new object[] {
                        username,
                        password,
                        espaceGUID,
                        lastVersionId}, this.GetHashset_FragmentsOperationCompleted, userState);
        }
        
        private void OnGetHashset_FragmentsOperationCompleted(object arg) {
            if ((this.GetHashset_FragmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHashset_FragmentsCompleted(this, new GetHashset_FragmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetPossibleEntryESpaces", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("consumers")]
        public EspaceIdNameAndKey[] GetPossibleEntryESpaces(string username, string password, string espaceGUID) {
            object[] results = this.Invoke("GetPossibleEntryESpaces", new object[] {
                        username,
                        password,
                        espaceGUID});
            return ((EspaceIdNameAndKey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPossibleEntryESpacesAsync(string username, string password, string espaceGUID) {
            this.GetPossibleEntryESpacesAsync(username, password, espaceGUID, null);
        }
        
        /// <remarks/>
        public void GetPossibleEntryESpacesAsync(string username, string password, string espaceGUID, object userState) {
            if ((this.GetPossibleEntryESpacesOperationCompleted == null)) {
                this.GetPossibleEntryESpacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossibleEntryESpacesOperationCompleted);
            }
            this.InvokeAsync("GetPossibleEntryESpaces", new object[] {
                        username,
                        password,
                        espaceGUID}, this.GetPossibleEntryESpacesOperationCompleted, userState);
        }
        
        private void OnGetPossibleEntryESpacesOperationCompleted(object arg) {
            if ((this.GetPossibleEntryESpacesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPossibleEntryESpacesCompleted(this, new GetPossibleEntryESpacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ListExtensions", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("extensions")]
        public ModuleInfo[] ListExtensions(string username, string password) {
            object[] results = this.Invoke("ListExtensions", new object[] {
                        username,
                        password});
            return ((ModuleInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ListExtensionsAsync(string username, string password) {
            this.ListExtensionsAsync(username, password, null);
        }
        
        /// <remarks/>
        public void ListExtensionsAsync(string username, string password, object userState) {
            if ((this.ListExtensionsOperationCompleted == null)) {
                this.ListExtensionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListExtensionsOperationCompleted);
            }
            this.InvokeAsync("ListExtensions", new object[] {
                        username,
                        password}, this.ListExtensionsOperationCompleted, userState);
        }
        
        private void OnListExtensionsOperationCompleted(object arg) {
            if ((this.ListExtensionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListExtensionsCompleted(this, new ListExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_GetAppDetails", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ApplicationInfo")]
        public ApplicationInfo Apps_GetAppDetails(string username, string password, string appKey, out ModuleInfo[] Modules, out ModuleInfo[] Dependencies) {
            object[] results = this.Invoke("Apps_GetAppDetails", new object[] {
                        username,
                        password,
                        appKey});
            Modules = ((ModuleInfo[])(results[1]));
            Dependencies = ((ModuleInfo[])(results[2]));
            return ((ApplicationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void Apps_GetAppDetailsAsync(string username, string password, string appKey) {
            this.Apps_GetAppDetailsAsync(username, password, appKey, null);
        }
        
        /// <remarks/>
        public void Apps_GetAppDetailsAsync(string username, string password, string appKey, object userState) {
            if ((this.Apps_GetAppDetailsOperationCompleted == null)) {
                this.Apps_GetAppDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_GetAppDetailsOperationCompleted);
            }
            this.InvokeAsync("Apps_GetAppDetails", new object[] {
                        username,
                        password,
                        appKey}, this.Apps_GetAppDetailsOperationCompleted, userState);
        }
        
        private void OnApps_GetAppDetailsOperationCompleted(object arg) {
            if ((this.Apps_GetAppDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_GetAppDetailsCompleted(this, new Apps_GetAppDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetConsumers", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("consumersList")]
        public EspaceIdNameAndKey[] GetConsumers(string username, string password, string producerESpaceKey, string referenceableElementKey) {
            object[] results = this.Invoke("GetConsumers", new object[] {
                        username,
                        password,
                        producerESpaceKey,
                        referenceableElementKey});
            return ((EspaceIdNameAndKey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetConsumersAsync(string username, string password, string producerESpaceKey, string referenceableElementKey) {
            this.GetConsumersAsync(username, password, producerESpaceKey, referenceableElementKey, null);
        }
        
        /// <remarks/>
        public void GetConsumersAsync(string username, string password, string producerESpaceKey, string referenceableElementKey, object userState) {
            if ((this.GetConsumersOperationCompleted == null)) {
                this.GetConsumersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConsumersOperationCompleted);
            }
            this.InvokeAsync("GetConsumers", new object[] {
                        username,
                        password,
                        producerESpaceKey,
                        referenceableElementKey}, this.GetConsumersOperationCompleted, userState);
        }
        
        private void OnGetConsumersOperationCompleted(object arg) {
            if ((this.GetConsumersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConsumersCompleted(this, new GetConsumersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/DeleteByName", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public HEMessage DeleteByName(string username, string password, string eSpaceName, out bool success) {
            object[] results = this.Invoke("DeleteByName", new object[] {
                        username,
                        password,
                        eSpaceName});
            success = ((bool)(results[1]));
            return ((HEMessage)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteByNameAsync(string username, string password, string eSpaceName) {
            this.DeleteByNameAsync(username, password, eSpaceName, null);
        }
        
        /// <remarks/>
        public void DeleteByNameAsync(string username, string password, string eSpaceName, object userState) {
            if ((this.DeleteByNameOperationCompleted == null)) {
                this.DeleteByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteByNameOperationCompleted);
            }
            this.InvokeAsync("DeleteByName", new object[] {
                        username,
                        password,
                        eSpaceName}, this.DeleteByNameOperationCompleted, userState);
        }
        
        private void OnDeleteByNameOperationCompleted(object arg) {
            if ((this.DeleteByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteByNameCompleted(this, new DeleteByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetProperties", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("properties")]
        public Properties[] GetProperties() {
            object[] results = this.Invoke("GetProperties", new object[0]);
            return ((Properties[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertiesAsync() {
            this.GetPropertiesAsync(null);
        }
        
        /// <remarks/>
        public void GetPropertiesAsync(object userState) {
            if ((this.GetPropertiesOperationCompleted == null)) {
                this.GetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetProperties", new object[0], this.GetPropertiesOperationCompleted, userState);
        }
        
        private void OnGetPropertiesOperationCompleted(object arg) {
            if ((this.GetPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertiesCompleted(this, new GetPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UsesExternalAuthentication", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool UsesExternalAuthentication() {
            object[] results = this.Invoke("UsesExternalAuthentication", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UsesExternalAuthenticationAsync() {
            this.UsesExternalAuthenticationAsync(null);
        }
        
        /// <remarks/>
        public void UsesExternalAuthenticationAsync(object userState) {
            if ((this.UsesExternalAuthenticationOperationCompleted == null)) {
                this.UsesExternalAuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsesExternalAuthenticationOperationCompleted);
            }
            this.InvokeAsync("UsesExternalAuthentication", new object[0], this.UsesExternalAuthenticationOperationCompleted, userState);
        }
        
        private void OnUsesExternalAuthenticationOperationCompleted(object arg) {
            if ((this.UsesExternalAuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsesExternalAuthenticationCompleted(this, new UsesExternalAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_RemoveModuleFromApp", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("message")]
        public HEMessage Apps_RemoveModuleFromApp(string username, string password, string AppKey, string ModuleKind, string ModuleKey, out bool Success) {
            object[] results = this.Invoke("Apps_RemoveModuleFromApp", new object[] {
                        username,
                        password,
                        AppKey,
                        ModuleKind,
                        ModuleKey});
            Success = ((bool)(results[1]));
            return ((HEMessage)(results[0]));
        }
        
        /// <remarks/>
        public void Apps_RemoveModuleFromAppAsync(string username, string password, string AppKey, string ModuleKind, string ModuleKey) {
            this.Apps_RemoveModuleFromAppAsync(username, password, AppKey, ModuleKind, ModuleKey, null);
        }
        
        /// <remarks/>
        public void Apps_RemoveModuleFromAppAsync(string username, string password, string AppKey, string ModuleKind, string ModuleKey, object userState) {
            if ((this.Apps_RemoveModuleFromAppOperationCompleted == null)) {
                this.Apps_RemoveModuleFromAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_RemoveModuleFromAppOperationCompleted);
            }
            this.InvokeAsync("Apps_RemoveModuleFromApp", new object[] {
                        username,
                        password,
                        AppKey,
                        ModuleKind,
                        ModuleKey}, this.Apps_RemoveModuleFromAppOperationCompleted, userState);
        }
        
        private void OnApps_RemoveModuleFromAppOperationCompleted(object arg) {
            if ((this.Apps_RemoveModuleFromAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_RemoveModuleFromAppCompleted(this, new Apps_RemoveModuleFromAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetPossibleBackOfficeESpaces", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("EspaceList")]
        public EspaceIdNameAndKey[] GetPossibleBackOfficeESpaces(string username, string password, string SelfEspaceKey) {
            object[] results = this.Invoke("GetPossibleBackOfficeESpaces", new object[] {
                        username,
                        password,
                        SelfEspaceKey});
            return ((EspaceIdNameAndKey[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPossibleBackOfficeESpacesAsync(string username, string password, string SelfEspaceKey) {
            this.GetPossibleBackOfficeESpacesAsync(username, password, SelfEspaceKey, null);
        }
        
        /// <remarks/>
        public void GetPossibleBackOfficeESpacesAsync(string username, string password, string SelfEspaceKey, object userState) {
            if ((this.GetPossibleBackOfficeESpacesOperationCompleted == null)) {
                this.GetPossibleBackOfficeESpacesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPossibleBackOfficeESpacesOperationCompleted);
            }
            this.InvokeAsync("GetPossibleBackOfficeESpaces", new object[] {
                        username,
                        password,
                        SelfEspaceKey}, this.GetPossibleBackOfficeESpacesOperationCompleted, userState);
        }
        
        private void OnGetPossibleBackOfficeESpacesOperationCompleted(object arg) {
            if ((this.GetPossibleBackOfficeESpacesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPossibleBackOfficeESpacesCompleted(this, new GetPossibleBackOfficeESpacesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/PublishSolution", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Messages")]
        public HEMessage[] PublishSolution(string username, string password, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] File, string Filename, bool JustUpload, bool CleanPublish, bool FromOSPTool, DBCatalogMapping[] CatalogMappings, string ReuseTablesOnMove, out int SolutionPubId, out string PackUID, out int PackSchemaVersion, out bool NeedsConfiguration) {
            object[] results = this.Invoke("PublishSolution", new object[] {
                        username,
                        password,
                        File,
                        Filename,
                        JustUpload,
                        CleanPublish,
                        FromOSPTool,
                        CatalogMappings,
                        ReuseTablesOnMove});
            SolutionPubId = ((int)(results[1]));
            PackUID = ((string)(results[2]));
            PackSchemaVersion = ((int)(results[3]));
            NeedsConfiguration = ((bool)(results[4]));
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void PublishSolutionAsync(string username, string password, byte[] File, string Filename, bool JustUpload, bool CleanPublish, bool FromOSPTool, DBCatalogMapping[] CatalogMappings, string ReuseTablesOnMove) {
            this.PublishSolutionAsync(username, password, File, Filename, JustUpload, CleanPublish, FromOSPTool, CatalogMappings, ReuseTablesOnMove, null);
        }
        
        /// <remarks/>
        public void PublishSolutionAsync(string username, string password, byte[] File, string Filename, bool JustUpload, bool CleanPublish, bool FromOSPTool, DBCatalogMapping[] CatalogMappings, string ReuseTablesOnMove, object userState) {
            if ((this.PublishSolutionOperationCompleted == null)) {
                this.PublishSolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishSolutionOperationCompleted);
            }
            this.InvokeAsync("PublishSolution", new object[] {
                        username,
                        password,
                        File,
                        Filename,
                        JustUpload,
                        CleanPublish,
                        FromOSPTool,
                        CatalogMappings,
                        ReuseTablesOnMove}, this.PublishSolutionOperationCompleted, userState);
        }
        
        private void OnPublishSolutionOperationCompleted(object arg) {
            if ((this.PublishSolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishSolutionCompleted(this, new PublishSolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetEntityUsageData", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("entityUsageInfo")]
        public EntityUsageInfo GetEntityUsageData(string espaceKey, string entityGuid, Text[] entitiesGuids) {
            object[] results = this.Invoke("GetEntityUsageData", new object[] {
                        espaceKey,
                        entityGuid,
                        entitiesGuids});
            return ((EntityUsageInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetEntityUsageDataAsync(string espaceKey, string entityGuid, Text[] entitiesGuids) {
            this.GetEntityUsageDataAsync(espaceKey, entityGuid, entitiesGuids, null);
        }
        
        /// <remarks/>
        public void GetEntityUsageDataAsync(string espaceKey, string entityGuid, Text[] entitiesGuids, object userState) {
            if ((this.GetEntityUsageDataOperationCompleted == null)) {
                this.GetEntityUsageDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntityUsageDataOperationCompleted);
            }
            this.InvokeAsync("GetEntityUsageData", new object[] {
                        espaceKey,
                        entityGuid,
                        entitiesGuids}, this.GetEntityUsageDataOperationCompleted, userState);
        }
        
        private void OnGetEntityUsageDataOperationCompleted(object arg) {
            if ((this.GetEntityUsageDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntityUsageDataCompleted(this, new GetEntityUsageDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetInstallationKind", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InstallationKind")]
        public string GetInstallationKind(out string DatabaseKind, out string ApplicationServerType, out bool HasProfilerMetrics) {
            object[] results = this.Invoke("GetInstallationKind", new object[0]);
            DatabaseKind = ((string)(results[1]));
            ApplicationServerType = ((string)(results[2]));
            HasProfilerMetrics = ((bool)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstallationKindAsync() {
            this.GetInstallationKindAsync(null);
        }
        
        /// <remarks/>
        public void GetInstallationKindAsync(object userState) {
            if ((this.GetInstallationKindOperationCompleted == null)) {
                this.GetInstallationKindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationKindOperationCompleted);
            }
            this.InvokeAsync("GetInstallationKind", new object[0], this.GetInstallationKindOperationCompleted, userState);
        }
        
        private void OnGetInstallationKindOperationCompleted(object arg) {
            if ((this.GetInstallationKindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstallationKindCompleted(this, new GetInstallationKindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/ChangeCommitMessage", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangeCommitMessage(string username, string password, int eSpaceVersionId, string newCommitMessage) {
            this.Invoke("ChangeCommitMessage", new object[] {
                        username,
                        password,
                        eSpaceVersionId,
                        newCommitMessage});
        }
        
        /// <remarks/>
        public void ChangeCommitMessageAsync(string username, string password, int eSpaceVersionId, string newCommitMessage) {
            this.ChangeCommitMessageAsync(username, password, eSpaceVersionId, newCommitMessage, null);
        }
        
        /// <remarks/>
        public void ChangeCommitMessageAsync(string username, string password, int eSpaceVersionId, string newCommitMessage, object userState) {
            if ((this.ChangeCommitMessageOperationCompleted == null)) {
                this.ChangeCommitMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCommitMessageOperationCompleted);
            }
            this.InvokeAsync("ChangeCommitMessage", new object[] {
                        username,
                        password,
                        eSpaceVersionId,
                        newCommitMessage}, this.ChangeCommitMessageOperationCompleted, userState);
        }
        
        private void OnChangeCommitMessageOperationCompleted(object arg) {
            if ((this.ChangeCommitMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCommitMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/RegisterOperation", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterOperation(string username, string espacename, int OperationType) {
            this.Invoke("RegisterOperation", new object[] {
                        username,
                        espacename,
                        OperationType});
        }
        
        /// <remarks/>
        public void RegisterOperationAsync(string username, string espacename, int OperationType) {
            this.RegisterOperationAsync(username, espacename, OperationType, null);
        }
        
        /// <remarks/>
        public void RegisterOperationAsync(string username, string espacename, int OperationType, object userState) {
            if ((this.RegisterOperationOperationCompleted == null)) {
                this.RegisterOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationOperationCompleted);
            }
            this.InvokeAsync("RegisterOperation", new object[] {
                        username,
                        espacename,
                        OperationType}, this.RegisterOperationOperationCompleted, userState);
        }
        
        private void OnRegisterOperationOperationCompleted(object arg) {
            if ((this.RegisterOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterOperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/Apps_DeleteApp", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("messages")]
        public HEMessage[] Apps_DeleteApp(string username, string password, string appKey, bool simulate, out bool success, out Text[] affectedApps, out Text[] deletedComponents) {
            object[] results = this.Invoke("Apps_DeleteApp", new object[] {
                        username,
                        password,
                        appKey,
                        simulate});
            success = ((bool)(results[1]));
            affectedApps = ((Text[])(results[2]));
            deletedComponents = ((Text[])(results[3]));
            return ((HEMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void Apps_DeleteAppAsync(string username, string password, string appKey, bool simulate) {
            this.Apps_DeleteAppAsync(username, password, appKey, simulate, null);
        }
        
        /// <remarks/>
        public void Apps_DeleteAppAsync(string username, string password, string appKey, bool simulate, object userState) {
            if ((this.Apps_DeleteAppOperationCompleted == null)) {
                this.Apps_DeleteAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApps_DeleteAppOperationCompleted);
            }
            this.InvokeAsync("Apps_DeleteApp", new object[] {
                        username,
                        password,
                        appKey,
                        simulate}, this.Apps_DeleteAppOperationCompleted, userState);
        }
        
        private void OnApps_DeleteAppOperationCompleted(object arg) {
            if ((this.Apps_DeleteAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Apps_DeleteAppCompleted(this, new Apps_DeleteAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UploadNeeded", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Needs")]
        public bool UploadNeeded(string username, string password, string eSpaceGUID, string eSpaceHash, out int eSpaceId, out int equalVersionId, out bool basedOnPrevious, out int runningVersionId, out HEMessage[] messages) {
            object[] results = this.Invoke("UploadNeeded", new object[] {
                        username,
                        password,
                        eSpaceGUID,
                        eSpaceHash});
            eSpaceId = ((int)(results[1]));
            equalVersionId = ((int)(results[2]));
            basedOnPrevious = ((bool)(results[3]));
            runningVersionId = ((int)(results[4]));
            messages = ((HEMessage[])(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadNeededAsync(string username, string password, string eSpaceGUID, string eSpaceHash) {
            this.UploadNeededAsync(username, password, eSpaceGUID, eSpaceHash, null);
        }
        
        /// <remarks/>
        public void UploadNeededAsync(string username, string password, string eSpaceGUID, string eSpaceHash, object userState) {
            if ((this.UploadNeededOperationCompleted == null)) {
                this.UploadNeededOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadNeededOperationCompleted);
            }
            this.InvokeAsync("UploadNeeded", new object[] {
                        username,
                        password,
                        eSpaceGUID,
                        eSpaceHash}, this.UploadNeededOperationCompleted, userState);
        }
        
        private void OnUploadNeededOperationCompleted(object arg) {
            if ((this.UploadNeededCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadNeededCompleted(this, new UploadNeededCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/GetAssemblyInfo", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("info")]
        public Assembly GetAssemblyInfo(string username, string password, string espaceGUID, string consumerName, bool inPTA) {
            object[] results = this.Invoke("GetAssemblyInfo", new object[] {
                        username,
                        password,
                        espaceGUID,
                        consumerName,
                        inPTA});
            return ((Assembly)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssemblyInfoAsync(string username, string password, string espaceGUID, string consumerName, bool inPTA) {
            this.GetAssemblyInfoAsync(username, password, espaceGUID, consumerName, inPTA, null);
        }
        
        /// <remarks/>
        public void GetAssemblyInfoAsync(string username, string password, string espaceGUID, string consumerName, bool inPTA, object userState) {
            if ((this.GetAssemblyInfoOperationCompleted == null)) {
                this.GetAssemblyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssemblyInfoOperationCompleted);
            }
            this.InvokeAsync("GetAssemblyInfo", new object[] {
                        username,
                        password,
                        espaceGUID,
                        consumerName,
                        inPTA}, this.GetAssemblyInfoOperationCompleted, userState);
        }
        
        private void OnGetAssemblyInfoOperationCompleted(object arg) {
            if ((this.GetAssemblyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssemblyInfoCompleted(this, new GetAssemblyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ServiceCenter/ServiceStudio/UploadLicense", RequestNamespace="http://www.outsystems.com", ResponseNamespace="http://www.outsystems.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("success")]
        public bool UploadLicense(string username, string password, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, bool isTrialCommunity, out string errorText) {
            object[] results = this.Invoke("UploadLicense", new object[] {
                        username,
                        password,
                        fileName,
                        fileContent,
                        isTrialCommunity});
            errorText = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadLicenseAsync(string username, string password, string fileName, byte[] fileContent, bool isTrialCommunity) {
            this.UploadLicenseAsync(username, password, fileName, fileContent, isTrialCommunity, null);
        }
        
        /// <remarks/>
        public void UploadLicenseAsync(string username, string password, string fileName, byte[] fileContent, bool isTrialCommunity, object userState) {
            if ((this.UploadLicenseOperationCompleted == null)) {
                this.UploadLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadLicenseOperationCompleted);
            }
            this.InvokeAsync("UploadLicense", new object[] {
                        username,
                        password,
                        fileName,
                        fileContent,
                        isTrialCommunity}, this.UploadLicenseOperationCompleted, userState);
        }
        
        private void OnUploadLicenseOperationCompleted(object arg) {
            if ((this.UploadLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadLicenseCompleted(this, new UploadLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class HEMessage {
        
        private string idField;
        
        private string messageField;
        
        private string detailField;
        
        private int helpRefField;
        
        private string extraInfoField;
        
        private string typeField;
        
        private bool submitableField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Detail {
            get {
                return this.detailField;
            }
            set {
                this.detailField = value;
            }
        }
        
        /// <remarks/>
        public int HelpRef {
            get {
                return this.helpRefField;
            }
            set {
                this.helpRefField = value;
            }
        }
        
        /// <remarks/>
        public string ExtraInfo {
            get {
                return this.extraInfoField;
            }
            set {
                this.extraInfoField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool Submitable {
            get {
                return this.submitableField;
            }
            set {
                this.submitableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Assembly {
        
        private int idField;
        
        private int area_IdField;
        
        private int espace_IdField;
        
        private int extension_IdField;
        
        private string hashField;
        
        private string signatureField;
        
        private bool in_DebugField;
        
        private string debugger_VersionField;
        
        private string compiledButNotDeployedHashField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Area_Id {
            get {
                return this.area_IdField;
            }
            set {
                this.area_IdField = value;
            }
        }
        
        /// <remarks/>
        public int Espace_Id {
            get {
                return this.espace_IdField;
            }
            set {
                this.espace_IdField = value;
            }
        }
        
        /// <remarks/>
        public int Extension_Id {
            get {
                return this.extension_IdField;
            }
            set {
                this.extension_IdField = value;
            }
        }
        
        /// <remarks/>
        public string Hash {
            get {
                return this.hashField;
            }
            set {
                this.hashField = value;
            }
        }
        
        /// <remarks/>
        public string Signature {
            get {
                return this.signatureField;
            }
            set {
                this.signatureField = value;
            }
        }
        
        /// <remarks/>
        public bool In_Debug {
            get {
                return this.in_DebugField;
            }
            set {
                this.in_DebugField = value;
            }
        }
        
        /// <remarks/>
        public string Debugger_Version {
            get {
                return this.debugger_VersionField;
            }
            set {
                this.debugger_VersionField = value;
            }
        }
        
        /// <remarks/>
        public string CompiledButNotDeployedHash {
            get {
                return this.compiledButNotDeployedHashField;
            }
            set {
                this.compiledButNotDeployedHashField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Entity_Usage {
        
        private int idField;
        
        private string entity_GUIDField;
        
        private System.DateTime dateField;
        
        private int size_In_KbField;
        
        private int row_CountField;
        
        private int user_ReadsField;
        
        private int user_UpdatesField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Entity_GUID {
            get {
                return this.entity_GUIDField;
            }
            set {
                this.entity_GUIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public int Size_In_Kb {
            get {
                return this.size_In_KbField;
            }
            set {
                this.size_In_KbField = value;
            }
        }
        
        /// <remarks/>
        public int Row_Count {
            get {
                return this.row_CountField;
            }
            set {
                this.row_CountField = value;
            }
        }
        
        /// <remarks/>
        public int User_Reads {
            get {
                return this.user_ReadsField;
            }
            set {
                this.user_ReadsField = value;
            }
        }
        
        /// <remarks/>
        public int User_Updates {
            get {
                return this.user_UpdatesField;
            }
            set {
                this.user_UpdatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class EntityUsageInfo {
        
        private int totalReadsField;
        
        private int totalUpdatesField;
        
        private Entity_Usage[] entityUsageDataField;
        
        private int cacheHitsField;
        
        private bool useCacheField;
        
        private int cacheMissesField;
        
        /// <remarks/>
        public int totalReads {
            get {
                return this.totalReadsField;
            }
            set {
                this.totalReadsField = value;
            }
        }
        
        /// <remarks/>
        public int totalUpdates {
            get {
                return this.totalUpdatesField;
            }
            set {
                this.totalUpdatesField = value;
            }
        }
        
        /// <remarks/>
        public Entity_Usage[] entityUsageData {
            get {
                return this.entityUsageDataField;
            }
            set {
                this.entityUsageDataField = value;
            }
        }
        
        /// <remarks/>
        public int cacheHits {
            get {
                return this.cacheHitsField;
            }
            set {
                this.cacheHitsField = value;
            }
        }
        
        /// <remarks/>
        public bool useCache {
            get {
                return this.useCacheField;
            }
            set {
                this.useCacheField = value;
            }
        }
        
        /// <remarks/>
        public int cacheMisses {
            get {
                return this.cacheMissesField;
            }
            set {
                this.cacheMissesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class DBCatalogMapping {
        
        private string espaceNameField;
        
        private string catalogNameField;
        
        /// <remarks/>
        public string EspaceName {
            get {
                return this.espaceNameField;
            }
            set {
                this.espaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string CatalogName {
            get {
                return this.catalogNameField;
            }
            set {
                this.catalogNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Properties {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Text {
        
        private string text1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Text")]
        public string Text1 {
            get {
                return this.text1Field;
            }
            set {
                this.text1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class DeveloperOperation {
        
        private string developerUsernameField;
        
        private string eSpaceNameField;
        
        /// <remarks/>
        public string DeveloperUsername {
            get {
                return this.developerUsernameField;
            }
            set {
                this.developerUsernameField = value;
            }
        }
        
        /// <remarks/>
        public string ESpaceName {
            get {
                return this.eSpaceNameField;
            }
            set {
                this.eSpaceNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class ReferenceType {
        
        private string keyField;
        
        private string nameField;
        
        private string kindField;
        
        private string descriptionField;
        
        private string signatureHashField;
        
        private byte[] signatureBinaryField;
        
        private int is_BrokenField;
        
        private int is_OutdatedField;
        
        private int is_SystemField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string SignatureHash {
            get {
                return this.signatureHashField;
            }
            set {
                this.signatureHashField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SignatureBinary {
            get {
                return this.signatureBinaryField;
            }
            set {
                this.signatureBinaryField = value;
            }
        }
        
        /// <remarks/>
        public int Is_Broken {
            get {
                return this.is_BrokenField;
            }
            set {
                this.is_BrokenField = value;
            }
        }
        
        /// <remarks/>
        public int Is_Outdated {
            get {
                return this.is_OutdatedField;
            }
            set {
                this.is_OutdatedField = value;
            }
        }
        
        /// <remarks/>
        public int Is_System {
            get {
                return this.is_SystemField;
            }
            set {
                this.is_SystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class SS_LicensingFeatureInfo {
        
        private string consumedField;
        
        private string limitField;
        
        /// <remarks/>
        public string Consumed {
            get {
                return this.consumedField;
            }
            set {
                this.consumedField = value;
            }
        }
        
        /// <remarks/>
        public string Limit {
            get {
                return this.limitField;
            }
            set {
                this.limitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class ActivationResponse {
        
        private string answerField;
        
        private HEMessage messageField;
        
        /// <remarks/>
        public string Answer {
            get {
                return this.answerField;
            }
            set {
                this.answerField = value;
            }
        }
        
        /// <remarks/>
        public HEMessage Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class ActivationLicenseInformation {
        
        private string schemaField;
        
        private string uIDField;
        
        private string creationField;
        
        private string termField;
        
        private string warnField;
        
        private string graceField;
        
        private string typeField;
        
        private string editionField;
        
        private string serialField;
        
        private string organizationField;
        
        private ActivationResponse stateField;
        
        private string isOEMField;
        
        /// <remarks/>
        public string Schema {
            get {
                return this.schemaField;
            }
            set {
                this.schemaField = value;
            }
        }
        
        /// <remarks/>
        public string UID {
            get {
                return this.uIDField;
            }
            set {
                this.uIDField = value;
            }
        }
        
        /// <remarks/>
        public string Creation {
            get {
                return this.creationField;
            }
            set {
                this.creationField = value;
            }
        }
        
        /// <remarks/>
        public string Term {
            get {
                return this.termField;
            }
            set {
                this.termField = value;
            }
        }
        
        /// <remarks/>
        public string Warn {
            get {
                return this.warnField;
            }
            set {
                this.warnField = value;
            }
        }
        
        /// <remarks/>
        public string Grace {
            get {
                return this.graceField;
            }
            set {
                this.graceField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Edition {
            get {
                return this.editionField;
            }
            set {
                this.editionField = value;
            }
        }
        
        /// <remarks/>
        public string Serial {
            get {
                return this.serialField;
            }
            set {
                this.serialField = value;
            }
        }
        
        /// <remarks/>
        public string Organization {
            get {
                return this.organizationField;
            }
            set {
                this.organizationField = value;
            }
        }
        
        /// <remarks/>
        public ActivationResponse State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string IsOEM {
            get {
                return this.isOEMField;
            }
            set {
                this.isOEMField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Entity_Record {
        
        private int idField;
        
        private string data_IdField;
        
        private string nameField;
        
        private string sS_KeyField;
        
        private string entity_SS_KeyField;
        
        private int espace_IdField;
        
        private bool is_ActiveField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Data_Id {
            get {
                return this.data_IdField;
            }
            set {
                this.data_IdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SS_Key {
            get {
                return this.sS_KeyField;
            }
            set {
                this.sS_KeyField = value;
            }
        }
        
        /// <remarks/>
        public string Entity_SS_Key {
            get {
                return this.entity_SS_KeyField;
            }
            set {
                this.entity_SS_KeyField = value;
            }
        }
        
        /// <remarks/>
        public int Espace_Id {
            get {
                return this.espace_IdField;
            }
            set {
                this.espace_IdField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Active {
            get {
                return this.is_ActiveField;
            }
            set {
                this.is_ActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class AbstractField {
        
        private string textField;
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class AbstractRecord {
        
        private AbstractField[] fieldsField;
        
        private string tagField;
        
        /// <remarks/>
        public AbstractField[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class DBCatalogInfo {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Binary {
        
        private byte[] binary1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Binary", DataType="base64Binary")]
        public byte[] Binary1 {
            get {
                return this.binary1Field;
            }
            set {
                this.binary1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class SolutionComponent {
        
        private int idField;
        
        private string nameField;
        
        private string sS_KeyField;
        
        private bool isExtensionField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SS_Key {
            get {
                return this.sS_KeyField;
            }
            set {
                this.sS_KeyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsExtension {
            get {
                return this.isExtensionField;
            }
            set {
                this.isExtensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class CommitExtraInfo {
        
        private bool canDownloadField;
        
        private string uploaderEmailField;
        
        private string uploaderSkypeNameField;
        
        /// <remarks/>
        public bool CanDownload {
            get {
                return this.canDownloadField;
            }
            set {
                this.canDownloadField = value;
            }
        }
        
        /// <remarks/>
        public string UploaderEmail {
            get {
                return this.uploaderEmailField;
            }
            set {
                this.uploaderEmailField = value;
            }
        }
        
        /// <remarks/>
        public string UploaderSkypeName {
            get {
                return this.uploaderSkypeNameField;
            }
            set {
                this.uploaderSkypeNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class WORCCommitExtraInfoModuleInfoRecord {
        
        private CommitExtraInfo ssSTCommitExtraInfoField;
        
        private ModuleInfo ssSTModuleInfoField;
        
        /// <remarks/>
        public CommitExtraInfo ssSTCommitExtraInfo {
            get {
                return this.ssSTCommitExtraInfoField;
            }
            set {
                this.ssSTCommitExtraInfoField = value;
            }
        }
        
        /// <remarks/>
        public ModuleInfo ssSTModuleInfo {
            get {
                return this.ssSTModuleInfoField;
            }
            set {
                this.ssSTModuleInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class ModuleInfo {
        
        private string moduleKindField;
        
        private int idField;
        
        private int version_IdField;
        
        private string sS_KeyField;
        
        private string nameField;
        
        private int versionField;
        
        private System.DateTime uploaded_DateField;
        
        private string uploader_NameField;
        
        private bool is_MultiTenantField;
        
        private bool is_RunningField;
        
        private string descriptionField;
        
        private string commitMessageField;
        
        private string uploaderUsernameField;
        
        private bool has_PublicElementsField;
        
        private bool default_Theme_Is_MobileField;
        
        private string applicationNameField;
        
        private string applicationKeyField;
        
        private bool isSystemField;
        
        private HEMessage[] messagesField;
        
        /// <remarks/>
        public string ModuleKind {
            get {
                return this.moduleKindField;
            }
            set {
                this.moduleKindField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Version_Id {
            get {
                return this.version_IdField;
            }
            set {
                this.version_IdField = value;
            }
        }
        
        /// <remarks/>
        public string SS_Key {
            get {
                return this.sS_KeyField;
            }
            set {
                this.sS_KeyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Uploaded_Date {
            get {
                return this.uploaded_DateField;
            }
            set {
                this.uploaded_DateField = value;
            }
        }
        
        /// <remarks/>
        public string Uploader_Name {
            get {
                return this.uploader_NameField;
            }
            set {
                this.uploader_NameField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_MultiTenant {
            get {
                return this.is_MultiTenantField;
            }
            set {
                this.is_MultiTenantField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Running {
            get {
                return this.is_RunningField;
            }
            set {
                this.is_RunningField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string CommitMessage {
            get {
                return this.commitMessageField;
            }
            set {
                this.commitMessageField = value;
            }
        }
        
        /// <remarks/>
        public string UploaderUsername {
            get {
                return this.uploaderUsernameField;
            }
            set {
                this.uploaderUsernameField = value;
            }
        }
        
        /// <remarks/>
        public bool Has_PublicElements {
            get {
                return this.has_PublicElementsField;
            }
            set {
                this.has_PublicElementsField = value;
            }
        }
        
        /// <remarks/>
        public bool Default_Theme_Is_Mobile {
            get {
                return this.default_Theme_Is_MobileField;
            }
            set {
                this.default_Theme_Is_MobileField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationKey {
            get {
                return this.applicationKeyField;
            }
            set {
                this.applicationKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
        
        /// <remarks/>
        public HEMessage[] Messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Area_Entry_Point {
        
        private int idField;
        
        private int area_IdField;
        
        private string nameField;
        
        private bool is_DefaultField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Area_Id {
            get {
                return this.area_IdField;
            }
            set {
                this.area_IdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Default {
            get {
                return this.is_DefaultField;
            }
            set {
                this.is_DefaultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class ApplicationInfo {
        
        private string nameField;
        
        private string descriptionField;
        
        private bool defaultThemeIsMobileField;
        
        private string keyField;
        
        private byte[] iconField;
        
        private bool hasFullControlField;
        
        private string frontOfficeEspaceKeyField;
        
        private string frontOfficeEspaceNameField;
        
        private string backOfficeEspaceKeyField;
        
        private string backOfficeEspaceNameField;
        
        private string webThemeGlobalKeyField;
        
        private string mobileThemeGlobalKeyField;
        
        private bool isActiveField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultThemeIsMobile {
            get {
                return this.defaultThemeIsMobileField;
            }
            set {
                this.defaultThemeIsMobileField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Icon {
            get {
                return this.iconField;
            }
            set {
                this.iconField = value;
            }
        }
        
        /// <remarks/>
        public bool HasFullControl {
            get {
                return this.hasFullControlField;
            }
            set {
                this.hasFullControlField = value;
            }
        }
        
        /// <remarks/>
        public string FrontOfficeEspaceKey {
            get {
                return this.frontOfficeEspaceKeyField;
            }
            set {
                this.frontOfficeEspaceKeyField = value;
            }
        }
        
        /// <remarks/>
        public string FrontOfficeEspaceName {
            get {
                return this.frontOfficeEspaceNameField;
            }
            set {
                this.frontOfficeEspaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string BackOfficeEspaceKey {
            get {
                return this.backOfficeEspaceKeyField;
            }
            set {
                this.backOfficeEspaceKeyField = value;
            }
        }
        
        /// <remarks/>
        public string BackOfficeEspaceName {
            get {
                return this.backOfficeEspaceNameField;
            }
            set {
                this.backOfficeEspaceNameField = value;
            }
        }
        
        /// <remarks/>
        public string WebThemeGlobalKey {
            get {
                return this.webThemeGlobalKeyField;
            }
            set {
                this.webThemeGlobalKeyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileThemeGlobalKey {
            get {
                return this.mobileThemeGlobalKeyField;
            }
            set {
                this.mobileThemeGlobalKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class EspaceIdNameAndKey {
        
        private int idField;
        
        private string nameField;
        
        private string sS_KeyField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SS_Key {
            get {
                return this.sS_KeyField;
            }
            set {
                this.sS_KeyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class TenantType {
        
        private int tenantIdField;
        
        private string nameField;
        
        /// <remarks/>
        public int TenantId {
            get {
                return this.tenantIdField;
            }
            set {
                this.tenantIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1015")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.outsystems.com")]
    public partial class Integer {
        
        private int integer1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Integer")]
        public int Integer1 {
            get {
                return this.integer1Field;
            }
            set {
                this.integer1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadNewCompletedEventHandler(object sender, UploadNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int versionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public HEMessage[] messages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool existsWithDifferentKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListVersionsCompletedEventHandler(object sender, ListVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ModuleInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadAndPublishExtensionCompletedEventHandler(object sender, UploadAndPublishExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadAndPublishExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadAndPublishExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int extensionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int extensionVersionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PushProducerToConsumerCompletedEventHandler(object sender, PushProducerToConsumerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PushProducerToConsumerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PushProducerToConsumerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Metrics_SynchronizedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EspaceTenantsCompletedEventHandler(object sender, EspaceTenantsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EspaceTenantsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EspaceTenantsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TenantType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TenantType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserProvidersCompletedEventHandler(object sender, GetUserProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EspaceIdNameAndKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EspaceIdNameAndKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_ListApplicationsCompletedEventHandler(object sender, Apps_ListApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_ListApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_ListApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckAgainstServerVersionCompletedEventHandler(object sender, CheckAgainstServerVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAgainstServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAgainstServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int serverVersionComparedTo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int conflictResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string uploadUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public System.DateTime uploadDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckCompilationCompletedEventHandler(object sender, CheckCompilationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCompilationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCompilationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPublishCompletedEventHandler(object sender, CheckPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadCompletedEventHandler(object sender, UploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int versionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public HEMessage[] messages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool existsWithDifferentKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEntryPointsCompletedEventHandler(object sender, GetEntryPointsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntryPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntryPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Area_Entry_Point[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Area_Entry_Point[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListEspacesCompletedEventHandler(object sender, ListEspacesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListEspacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListEspacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ModuleInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListCommitsCompletedEventHandler(object sender, ListCommitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListCommitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListCommitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WORCCommitExtraInfoModuleInfoRecord[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WORCCommitExtraInfoModuleInfoRecord[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public WORCCommitExtraInfoModuleInfoRecord[] extensionCommits {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WORCCommitExtraInfoModuleInfoRecord[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadProductLicenseCompletedEventHandler(object sender, UploadProductLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadProductLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadProductLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string responseText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMessagesSolutionCompletedEventHandler(object sender, GetMessagesSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int LastMessageId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListSolutionComponentsCompletedEventHandler(object sender, ListSolutionComponentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListSolutionComponentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListSolutionComponentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SolutionComponent[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SolutionComponent[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProfilerMetricsCompletedEventHandler(object sender, GetProfilerMetricsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfilerMetricsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfilerMetricsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Binary[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Binary[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestQueryCompletedEventHandler(object sender, TestQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ExecutedSQL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string QueryResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string AdvancedSQL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Metrics_FetchCompletedEventHandler(object sender, Metrics_FetchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Metrics_FetchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Metrics_FetchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Integer[] ListMonthIDs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Integer[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Integer[] ListWeekIDs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Integer[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_CreateOrUpdateAppCompletedEventHandler(object sender, Apps_CreateOrUpdateAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_CreateOrUpdateAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_CreateOrUpdateAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CompileCompletedEventHandler(object sender, CompileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PublishPTACompletedEventHandler(object sender, PublishPTACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishPTACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishPTACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListCatalogsCompletedEventHandler(object sender, ListCatalogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListCatalogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListCatalogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DBCatalogInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DBCatalogInfo[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ImportTableCompletedEventHandler(object sender, ImportTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public AbstractRecord[] tableData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AbstractRecord[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Entity_Record[] existingRecords {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Entity_Record[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLicenseInformationCompletedEventHandler(object sender, GetLicenseInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ActivationLicenseInformation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ActivationLicenseInformation)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public SS_LicensingFeatureInfo softwareUnits {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SS_LicensingFeatureInfo)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public SS_LicensingFeatureInfo namedUsers {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SS_LicensingFeatureInfo)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public System.DateTime serverDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool trialCommunityInstalled {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PublishCompletedEventHandler(object sender, PublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HandshakeCompletedEventHandler(object sender, HandshakeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HandshakeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HandshakeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string error {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProductUrlCompletedEventHandler(object sender, GetProductUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CanOpenOmlCompletedEventHandler(object sender, CanOpenOmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanOpenOmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanOpenOmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_AddModuleToAppCompletedEventHandler(object sender, Apps_AddModuleToAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_AddModuleToAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_AddModuleToAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DownloadExtensionCompletedEventHandler(object sender, DownloadExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEspaceIdCompletedEventHandler(object sender, GetEspaceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEspaceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEspaceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPhoneConfigCompletedEventHandler(object sender, CheckPhoneConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPhoneConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPhoneConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AssociateDependenciesCompletedEventHandler(object sender, AssociateDependenciesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssociateDependenciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssociateDependenciesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteModuleByKeyCompletedEventHandler(object sender, DeleteModuleByKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteModuleByKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteModuleByKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListReferenceableCompletedEventHandler(object sender, ListReferenceableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListReferenceableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListReferenceableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReferenceType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReferenceType[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReferenceDetailsCompletedEventHandler(object sender, GetReferenceDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReferenceDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReferenceDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReferenceType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReferenceType)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDeveloperOperationsCompletedEventHandler(object sender, GetDeveloperOperationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeveloperOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeveloperOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeveloperOperation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeveloperOperation[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DownloadCompletedEventHandler(object sender, DownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime uploadDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string uploadUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool isPublishedVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public HEMessage message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestActionCompletedEventHandler(object sender, TestActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ResultB {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DownloadByNameCompletedEventHandler(object sender, DownloadByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime uploadDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string uploadUser {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool isPublishedVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public HEMessage message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteProductLicenseCompletedEventHandler(object sender, DeleteProductLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProductLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProductLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string responseText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHashset_FragmentsCompletedEventHandler(object sender, GetHashset_FragmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHashset_FragmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHashset_FragmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string hashset {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string fragments {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPossibleEntryESpacesCompletedEventHandler(object sender, GetPossibleEntryESpacesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPossibleEntryESpacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPossibleEntryESpacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EspaceIdNameAndKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EspaceIdNameAndKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ListExtensionsCompletedEventHandler(object sender, ListExtensionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListExtensionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ModuleInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_GetAppDetailsCompletedEventHandler(object sender, Apps_GetAppDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_GetAppDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_GetAppDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationInfo)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ModuleInfo[] Modules {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleInfo[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ModuleInfo[] Dependencies {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ModuleInfo[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetConsumersCompletedEventHandler(object sender, GetConsumersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConsumersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConsumersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EspaceIdNameAndKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EspaceIdNameAndKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteByNameCompletedEventHandler(object sender, DeleteByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPropertiesCompletedEventHandler(object sender, GetPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Properties[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Properties[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UsesExternalAuthenticationCompletedEventHandler(object sender, UsesExternalAuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsesExternalAuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsesExternalAuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_RemoveModuleFromAppCompletedEventHandler(object sender, Apps_RemoveModuleFromAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_RemoveModuleFromAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_RemoveModuleFromAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPossibleBackOfficeESpacesCompletedEventHandler(object sender, GetPossibleBackOfficeESpacesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPossibleBackOfficeESpacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPossibleBackOfficeESpacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EspaceIdNameAndKey[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EspaceIdNameAndKey[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PublishSolutionCompletedEventHandler(object sender, PublishSolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishSolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishSolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int SolutionPubId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string PackUID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int PackSchemaVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public bool NeedsConfiguration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEntityUsageDataCompletedEventHandler(object sender, GetEntityUsageDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntityUsageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntityUsageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EntityUsageInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EntityUsageInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInstallationKindCompletedEventHandler(object sender, GetInstallationKindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstallationKindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstallationKindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DatabaseKind {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ApplicationServerType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool HasProfilerMetrics {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangeCommitMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterOperationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Apps_DeleteAppCompletedEventHandler(object sender, Apps_DeleteAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Apps_DeleteAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Apps_DeleteAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public HEMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool success {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Text[] affectedApps {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Text[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public Text[] deletedComponents {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Text[])(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadNeededCompletedEventHandler(object sender, UploadNeededCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadNeededCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadNeededCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int eSpaceId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int equalVersionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool basedOnPrevious {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int runningVersionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public HEMessage[] messages {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HEMessage[])(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAssemblyInfoCompletedEventHandler(object sender, GetAssemblyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssemblyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssemblyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Assembly Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Assembly)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadLicenseCompletedEventHandler(object sender, UploadLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591